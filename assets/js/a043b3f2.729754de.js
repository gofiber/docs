"use strict";(self.webpackChunkfiber_docs=self.webpackChunkfiber_docs||[]).push([["47151"],{80204:function(e,t,n){n.r(t),n.d(t,{frontMatter:()=>s,toc:()=>a,default:()=>c,metadata:()=>r,assets:()=>d,contentTitle:()=>o});var r=JSON.parse('{"id":"middleware/logger","title":"Logger","description":"Logger middleware for Fiber that logs HTTP requests and responses.","source":"@site/docs/core/middleware/logger.md","sourceDirName":"middleware","slug":"/middleware/logger","permalink":"/next/middleware/logger","draft":false,"unlisted":false,"editUrl":"https://github.com/gofiber/fiber/edit/main/docs/middleware/logger.md","tags":[],"version":"current","lastUpdatedAt":1762030608000,"frontMatter":{"id":"logger"},"sidebar":"left_sidebar","previous":{"title":"Limiter","permalink":"/next/middleware/limiter"},"next":{"title":"Pprof","permalink":"/next/middleware/pprof"}}'),i=n(74848),l=n(84429);let s={id:"logger"},o="Logger",d={},a=[{value:"Signatures",id:"signatures",level:2},{value:"Examples",id:"examples",level:2},{value:"Use Logger Middleware with Other Loggers",id:"use-logger-middleware-with-other-loggers",level:3},{value:"Config",id:"config",level:2},{value:"Default Config",id:"default-config",level:2},{value:"Predefined Formats",id:"predefined-formats",level:2},{value:"Constants",id:"constants",level:2}];function g(e){let t={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,l.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.header,{children:(0,i.jsx)(t.h1,{id:"logger",children:"Logger"})}),"\n",(0,i.jsxs)(t.p,{children:["Logger middleware for ",(0,i.jsx)(t.a,{href:"https://github.com/gofiber/fiber",children:"Fiber"})," that logs HTTP requests and responses."]}),"\n",(0,i.jsx)(t.h2,{id:"signatures",children:"Signatures"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-go",children:"func New(config ...Config) fiber.Handler\n"})}),"\n",(0,i.jsx)(t.h2,{id:"examples",children:"Examples"}),"\n",(0,i.jsx)(t.p,{children:"Import the package:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-go",children:'import (\n    "github.com/gofiber/fiber/v3"\n    "github.com/gofiber/fiber/v3/middleware/logger"\n)\n'})}),"\n",(0,i.jsx)(t.admonition,{type:"tip",children:(0,i.jsx)(t.p,{children:"Registration order matters: only routes added after the logger are logged, so register it early."})}),"\n",(0,i.jsx)(t.p,{children:"Once your Fiber app is initialized, use the middleware like this:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-go",children:'// Initialize default config\napp.Use(logger.New())\n\n// Or extend your config for customization\n// Log remote IP and port\napp.Use(logger.New(logger.Config{\n    Format: "[${ip}]:${port} ${status} - ${method} ${path}\\n",\n}))\n\n// Logging Request ID\napp.Use(requestid.New()) // Ensure requestid middleware is used before the logger\napp.Use(logger.New(logger.Config{\n    CustomTags: map[string]logger.LogFunc{\n        "requestid": func(output logger.Buffer, c fiber.Ctx, data *logger.Data, extraParam string) (int, error) {\n            return output.WriteString(requestid.FromContext(c))\n        },\n    },\n    // For more options, see the Config section\n    // Use the custom tag ${requestid} as defined above.\n    Format: "${pid} ${requestid} ${status} - ${method} ${path}\\n",\n}))\n\n// Changing TimeZone & TimeFormat\napp.Use(logger.New(logger.Config{\n    Format:     "${pid} ${status} - ${method} ${path}\\n",\n    TimeFormat: "02-Jan-2006",\n    TimeZone:   "America/New_York",\n}))\n\n// Custom File Writer\naccessLog, err := os.OpenFile("./access.log", os.O_RDWR|os.O_CREATE|os.O_APPEND, 0666)\nif err != nil {\n    log.Fatalf("error opening access.log file: %v", err)\n}\ndefer accessLog.Close()\napp.Use(logger.New(logger.Config{\n    Stream: accessLog,\n}))\n\n// Add Custom Tags\napp.Use(logger.New(logger.Config{\n    CustomTags: map[string]logger.LogFunc{\n        "custom_tag": func(output logger.Buffer, c fiber.Ctx, data *logger.Data, extraParam string) (int, error) {\n            return output.WriteString("it is a custom tag")\n        },\n    },\n}))\n\n// Callback after log is written\napp.Use(logger.New(logger.Config{\n    TimeFormat: time.RFC3339Nano,\n    TimeZone:   "Asia/Shanghai",\n    Done: func(c fiber.Ctx, logString []byte) {\n        if c.Response().StatusCode() != fiber.StatusOK {\n            reporter.SendToSlack(logString)\n        }\n    },\n}))\n\n// Disable colors when outputting to default format\napp.Use(logger.New(logger.Config{\n    DisableColors: true,\n}))\n\n// Force the use of colors\napp.Use(logger.New(logger.Config{\n    ForceColors: true,\n}))\n\n// Use predefined formats \napp.Use(logger.New(logger.Config{\n    Format: logger.FormatCommon,\n}))\n\napp.Use(logger.New(logger.Config{\n    Format: logger.FormatCombined,\n}))\n\napp.Use(logger.New(logger.Config{\n    Format: logger.FormatJSON, \n}))\n\napp.Use(logger.New(logger.Config{\n    Format: logger.FormatECS, \n}))\n'})}),"\n",(0,i.jsx)(t.h3,{id:"use-logger-middleware-with-other-loggers",children:"Use Logger Middleware with Other Loggers"}),"\n",(0,i.jsxs)(t.p,{children:["To combine the logger middleware with loggers like Zerolog, Zap, or Logrus, use the ",(0,i.jsx)(t.code,{children:"LoggerToWriter"})," helper to adapt them to an ",(0,i.jsx)(t.code,{children:"io.Writer"}),"."]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-go",children:'package main\n\nimport (\n    "github.com/gofiber/contrib/fiberzap/v2"\n    "github.com/gofiber/fiber/v3"\n    "github.com/gofiber/fiber/v3/log"\n    "github.com/gofiber/fiber/v3/middleware/logger"\n)\n\nfunc main() {\n    // Create a new Fiber instance\n    app := fiber.New()\n\n    // Create a new zap logger which is compatible with Fiber AllLogger interface\n    zap := fiberzap.NewLogger(fiberzap.LoggerConfig{\n        ExtraKeys: []string{"request_id"},\n    })\n\n    // Use the logger middleware with the zap logger\n    app.Use(logger.New(logger.Config{\n        Stream: logger.LoggerToWriter(zap, log.LevelDebug),\n    }))\n\n    // Define a route\n    app.Get("/", func(c fiber.Ctx) error {\n        return c.SendString("Hello, World!")\n    })\n\n    // Start server on http://localhost:3000\n    app.Listen(":3000")\n}\n'})}),"\n",(0,i.jsx)(t.admonition,{type:"tip",children:(0,i.jsxs)(t.p,{children:["Writing to ",(0,i.jsx)(t.code,{children:"os.File"})," is goroutine-safe, but custom streams may require locking to serialize writes."]})}),"\n",(0,i.jsx)(t.h2,{id:"config",children:"Config"}),"\n",(0,i.jsxs)(t.table,{children:[(0,i.jsx)(t.thead,{children:(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.th,{style:{textAlign:"left"},children:"Property"}),(0,i.jsx)(t.th,{style:{textAlign:"left"},children:"Type"}),(0,i.jsx)(t.th,{style:{textAlign:"left"},children:"Description"}),(0,i.jsx)(t.th,{style:{textAlign:"left"},children:"Default"})]})}),(0,i.jsxs)(t.tbody,{children:[(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{style:{textAlign:"left"},children:"Next"}),(0,i.jsx)(t.td,{style:{textAlign:"left"},children:(0,i.jsx)(t.code,{children:"func(fiber.Ctx) bool"})}),(0,i.jsx)(t.td,{style:{textAlign:"left"},children:"Next defines a function to skip this middleware when it returns true."}),(0,i.jsx)(t.td,{style:{textAlign:"left"},children:(0,i.jsx)(t.code,{children:"nil"})})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{style:{textAlign:"left"},children:"Skip"}),(0,i.jsx)(t.td,{style:{textAlign:"left"},children:(0,i.jsx)(t.code,{children:"func(fiber.Ctx) bool"})}),(0,i.jsx)(t.td,{style:{textAlign:"left"},children:"Skip is a function to determine if logging is skipped or written to Stream."}),(0,i.jsx)(t.td,{style:{textAlign:"left"},children:(0,i.jsx)(t.code,{children:"nil"})})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{style:{textAlign:"left"},children:"Done"}),(0,i.jsx)(t.td,{style:{textAlign:"left"},children:(0,i.jsx)(t.code,{children:"func(fiber.Ctx, []byte)"})}),(0,i.jsx)(t.td,{style:{textAlign:"left"},children:"Done is a function that is called after the log string for a request is written to Stream, and pass the log string as parameter."}),(0,i.jsx)(t.td,{style:{textAlign:"left"},children:(0,i.jsx)(t.code,{children:"nil"})})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{style:{textAlign:"left"},children:"CustomTags"}),(0,i.jsx)(t.td,{style:{textAlign:"left"},children:(0,i.jsx)(t.code,{children:"map[string]LogFunc"})}),(0,i.jsx)(t.td,{style:{textAlign:"left"},children:"tagFunctions defines the custom tag action."}),(0,i.jsx)(t.td,{style:{textAlign:"left"},children:(0,i.jsx)(t.code,{children:"map[string]LogFunc"})})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{style:{textAlign:"left"},children:(0,i.jsx)(t.code,{children:"Format"})}),(0,i.jsx)(t.td,{style:{textAlign:"left"},children:(0,i.jsx)(t.code,{children:"string"})}),(0,i.jsxs)(t.td,{style:{textAlign:"left"},children:["Defines the logging tags. See more in ",(0,i.jsx)(t.a,{href:"#predefined-formats",children:"Predefined Formats"}),", or create your own using ",(0,i.jsx)(t.a,{href:"#constants",children:"Tags"}),"."]}),(0,i.jsxs)(t.td,{style:{textAlign:"left"},children:[(0,i.jsx)(t.code,{children:"[${time}] ${ip} ${status} - ${latency} ${method} ${path} ${error}\\n"})," (same as ",(0,i.jsx)(t.code,{children:"DefaultFormat"}),")"]})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{style:{textAlign:"left"},children:"TimeFormat"}),(0,i.jsx)(t.td,{style:{textAlign:"left"},children:(0,i.jsx)(t.code,{children:"string"})}),(0,i.jsx)(t.td,{style:{textAlign:"left"},children:"TimeFormat defines the time format for log timestamps."}),(0,i.jsx)(t.td,{style:{textAlign:"left"},children:(0,i.jsx)(t.code,{children:"15:04:05"})})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{style:{textAlign:"left"},children:"TimeZone"}),(0,i.jsx)(t.td,{style:{textAlign:"left"},children:(0,i.jsx)(t.code,{children:"string"})}),(0,i.jsx)(t.td,{style:{textAlign:"left"},children:'TimeZone can be specified, such as "UTC" and "America/New_York" and "Asia/Chongqing", etc'}),(0,i.jsx)(t.td,{style:{textAlign:"left"},children:(0,i.jsx)(t.code,{children:'"Local"'})})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{style:{textAlign:"left"},children:"TimeInterval"}),(0,i.jsx)(t.td,{style:{textAlign:"left"},children:(0,i.jsx)(t.code,{children:"time.Duration"})}),(0,i.jsx)(t.td,{style:{textAlign:"left"},children:"TimeInterval is the delay before the timestamp is updated."}),(0,i.jsx)(t.td,{style:{textAlign:"left"},children:(0,i.jsx)(t.code,{children:"500 * time.Millisecond"})})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{style:{textAlign:"left"},children:"Stream"}),(0,i.jsx)(t.td,{style:{textAlign:"left"},children:(0,i.jsx)(t.code,{children:"io.Writer"})}),(0,i.jsx)(t.td,{style:{textAlign:"left"},children:"Stream is a writer where logs are written."}),(0,i.jsx)(t.td,{style:{textAlign:"left"},children:(0,i.jsx)(t.code,{children:"os.Stdout"})})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{style:{textAlign:"left"},children:"LoggerFunc"}),(0,i.jsx)(t.td,{style:{textAlign:"left"},children:(0,i.jsx)(t.code,{children:"func(c fiber.Ctx, data *Data, cfg Config) error"})}),(0,i.jsx)(t.td,{style:{textAlign:"left"},children:"Custom logger function for integration with logging libraries (Zerolog, Zap, Logrus, etc). Defaults to Fiber's default logger if not defined."}),(0,i.jsx)(t.td,{style:{textAlign:"left"},children:(0,i.jsx)(t.code,{children:"see default_logger.go defaultLoggerInstance"})})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{style:{textAlign:"left"},children:"DisableColors"}),(0,i.jsx)(t.td,{style:{textAlign:"left"},children:(0,i.jsx)(t.code,{children:"bool"})}),(0,i.jsx)(t.td,{style:{textAlign:"left"},children:"DisableColors defines if the logs output should be colorized."}),(0,i.jsx)(t.td,{style:{textAlign:"left"},children:(0,i.jsx)(t.code,{children:"false"})})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{style:{textAlign:"left"},children:"ForceColors"}),(0,i.jsx)(t.td,{style:{textAlign:"left"},children:(0,i.jsx)(t.code,{children:"bool"})}),(0,i.jsx)(t.td,{style:{textAlign:"left"},children:"ForceColors defines if the logs output should be colorized even when the output is not a terminal."}),(0,i.jsx)(t.td,{style:{textAlign:"left"},children:(0,i.jsx)(t.code,{children:"false"})})]})]})]}),"\n",(0,i.jsx)(t.h2,{id:"default-config",children:"Default Config"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-go",children:'var ConfigDefault = Config{\n    Next:              nil,\n    Skip:              nil,\n    Done:              nil,\n    Format:            DefaultFormat,\n    TimeFormat:        "15:04:05",\n    TimeZone:          "Local",\n    TimeInterval:      500 * time.Millisecond,\n    Stream:            os.Stdout,\n    BeforeHandlerFunc: beforeHandlerFunc,\n    LoggerFunc:        defaultLoggerInstance,\n    enableColors:      true,\n}\n'})}),"\n",(0,i.jsx)(t.h2,{id:"predefined-formats",children:"Predefined Formats"}),"\n",(0,i.jsx)(t.p,{children:"Logger provides predefined formats that you can use by name or directly by specifying the format string."}),"\n",(0,i.jsxs)(t.table,{children:[(0,i.jsx)(t.thead,{children:(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.th,{children:(0,i.jsx)(t.strong,{children:"Format Constant"})}),(0,i.jsx)(t.th,{children:(0,i.jsx)(t.strong,{children:"Format String"})}),(0,i.jsx)(t.th,{children:(0,i.jsx)(t.strong,{children:"Description"})})]})}),(0,i.jsxs)(t.tbody,{children:[(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:(0,i.jsx)(t.code,{children:"DefaultFormat"})}),(0,i.jsx)(t.td,{children:(0,i.jsx)(t.code,{children:'"[${time}] ${ip} ${status} - ${latency} ${method} ${path} ${error}\\n"'})}),(0,i.jsx)(t.td,{children:"Fiber's default logger format."})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:(0,i.jsx)(t.code,{children:"CommonFormat"})}),(0,i.jsx)(t.td,{children:(0,i.jsx)(t.code,{children:'"${ip} - - [${time}] "${method} ${url} ${protocol}" ${status} ${bytesSent}\\n"'})}),(0,i.jsx)(t.td,{children:"Common Log Format (CLF) used in web server logs."})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:(0,i.jsx)(t.code,{children:"CombinedFormat"})}),(0,i.jsx)(t.td,{children:(0,i.jsx)(t.code,{children:'"${ip} - - [${time}] "${method} ${url} ${protocol}" ${status} ${bytesSent} "${referer}" "${ua}"\\n"'})}),(0,i.jsxs)(t.td,{children:["CLF format plus the ",(0,i.jsx)(t.code,{children:"referer"})," and ",(0,i.jsx)(t.code,{children:"user agent"})," fields."]})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:(0,i.jsx)(t.code,{children:"JSONFormat"})}),(0,i.jsx)(t.td,{children:(0,i.jsx)(t.code,{children:'"{time: ${time}, ip: ${ip}, method: ${method}, url: ${url}, status: ${status}, bytesSent: ${bytesSent}}\\n"'})}),(0,i.jsx)(t.td,{children:"JSON format for structured logging."})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:(0,i.jsx)(t.code,{children:"ECSFormat"})}),(0,i.jsx)(t.td,{children:(0,i.jsx)(t.code,{children:'"{\\"@timestamp\\":\\"${time}\\",\\"ecs\\":{\\"version\\":\\"1.6.0\\"},\\"client\\":{\\"ip\\":\\"${ip}\\"},\\"http\\":{\\"request\\":{\\"method\\":\\"${method}\\",\\"url\\":\\"${url}\\",\\"protocol\\":\\"${protocol}\\"},\\"response\\":{\\"status_code\\":${status},\\"body\\":{\\"bytes\\":${bytesSent}}}},\\"log\\":{\\"level\\":\\"INFO\\",\\"logger\\":\\"fiber\\"},\\"message\\":\\"${method} ${url} responded with ${status}\\"}\\n"'})}),(0,i.jsx)(t.td,{children:"Elastic Common Schema (ECS) format for structured logging."})]})]})]}),"\n",(0,i.jsx)(t.h2,{id:"constants",children:"Constants"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-go",children:'// Logger variables\nconst (\n    TagPid               = "pid"\n    TagTime              = "time"\n    TagReferer           = "referer"\n    TagProtocol          = "protocol"\n    TagPort              = "port"\n    TagIP                = "ip"\n    TagIPs               = "ips"\n    TagHost              = "host"\n    TagMethod            = "method"\n    TagPath              = "path"\n    TagURL               = "url"\n    TagUA                = "ua"\n    TagLatency           = "latency"\n    TagStatus            = "status"         // response status\n    TagResBody           = "resBody"        // response body\n    TagReqHeaders        = "reqHeaders"\n    TagQueryStringParams = "queryParams"    // request query parameters\n    TagBody              = "body"           // request body\n    TagBytesSent         = "bytesSent"\n    TagBytesReceived     = "bytesReceived"\n    TagRoute             = "route"\n    TagError             = "error"\n    TagReqHeader         = "reqHeader:"     // request header\n    TagRespHeader        = "respHeader:"    // response header\n    TagQuery             = "query:"         // request query\n    TagForm              = "form:"          // request form\n    TagCookie            = "cookie:"        // request cookie\n    TagLocals            = "locals:"\n    // colors\n    TagBlack             = "black"\n    TagRed               = "red"\n    TagGreen             = "green"\n    TagYellow            = "yellow"\n    TagBlue              = "blue"\n    TagMagenta           = "magenta"\n    TagCyan              = "cyan"\n    TagWhite             = "white"\n    TagReset             = "reset"\n)\n'})})]})}function c(e={}){let{wrapper:t}={...(0,l.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(g,{...e})}):g(e)}},84429:function(e,t,n){n.d(t,{R:()=>s,x:()=>o});var r=n(96540);let i={},l=r.createContext(i);function s(e){let t=r.useContext(l);return r.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),r.createElement(l.Provider,{value:t},e.children)}}}]);