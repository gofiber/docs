"use strict";(self.webpackChunkfiber_docs=self.webpackChunkfiber_docs||[]).push([["80330"],{93399:function(e,t,n){n.r(t),n.d(t,{frontMatter:()=>o,toc:()=>c,default:()=>h,metadata:()=>i,assets:()=>l,contentTitle:()=>r});var i=JSON.parse('{"id":"local-development-testcontainers/README","title":"Todo App + Auth + GORM + Testcontainers","description":"A Todo application with authentication using GORM and Postgres.","source":"@site/docs/recipes/local-development-testcontainers/README.md","sourceDirName":"local-development-testcontainers","slug":"/local-development-testcontainers/","permalink":"/recipes/local-development-testcontainers/","draft":false,"unlisted":false,"editUrl":"https://github.com/gofiber/recipes/edit/master/local-development-testcontainers/README.md","tags":[],"version":"current","lastUpdatedAt":1762030608000,"frontMatter":{"title":"Todo App + Auth + GORM + Testcontainers","keywords":["todo app","gorm","authentication","testcontainers","postgres"],"description":"A Todo application with authentication using GORM and Postgres."},"sidebar":"left_sidebar","previous":{"title":"Kubernetes","permalink":"/recipes/k8s/"},"next":{"title":"Memgraph","permalink":"/recipes/memgraph/"}}'),s=n(74848),a=n(84429);let o={title:"Todo App + Auth + GORM + Testcontainers",keywords:["todo app","gorm","authentication","testcontainers","postgres"],description:"A Todo application with authentication using GORM and Postgres."},r="Todo App with Auth using GORM and Testcontainers",l={},c=[{value:"Prerequisites",id:"prerequisites",level:2},{value:"Installation",id:"installation",level:2},{value:"Running the Application",id:"running-the-application",level:2},{value:"Environment Variables",id:"environment-variables",level:2}];function d(e){let t={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,a.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.header,{children:(0,s.jsx)(t.h1,{id:"todo-app-with-auth-using-gorm-and-testcontainers",children:"Todo App with Auth using GORM and Testcontainers"})}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.a,{href:"https://github.com/gofiber/recipes/tree/master/todo-app-testcontainers-postgres",children:(0,s.jsx)(t.img,{src:"https://img.shields.io/static/v1?label=&message=Github&color=2ea44f&style=for-the-badge&logo=github",alt:"Github"})})," ",(0,s.jsx)(t.a,{href:"https://stackblitz.com/github.com/gofiber/recipes/tree/master/todo-app-testcontainers-postgres",children:(0,s.jsx)(t.img,{src:"https://img.shields.io/static/v1?label=&message=StackBlitz&color=2ea44f&style=for-the-badge&logo=StackBlitz",alt:"StackBlitz"})})]}),"\n",(0,s.jsx)(t.p,{children:"This project demonstrates a Todo application with authentication using GORM and Testcontainers."}),"\n",(0,s.jsxs)(t.p,{children:["The database is a Postgres instance created using the GoFiber's ",(0,s.jsx)(t.a,{href:"https://github.com/gofiber/contrib/testcontainers",children:"Testcontainers Service module"}),". The instance is reused across multiple runs of the application, allowing to develop locally without having to wait for the database to be ready."]}),"\n",(0,s.jsxs)(t.p,{children:["When using the ",(0,s.jsx)(t.code,{children:"air"})," command to run the application, the database is automatically started alongside the Fiber application, and it's automatically stopped when the air command is interrupted."]}),"\n",(0,s.jsx)(t.h2,{id:"prerequisites",children:"Prerequisites"}),"\n",(0,s.jsxs)(t.p,{children:["Ensure you have the following installed and available in your ",(0,s.jsx)(t.code,{children:"GOPATH"}),":"]}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:"Golang"}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.a,{href:"https://github.com/air-verse/air",children:"Air"})," for hot reloading"]}),"\n"]}),"\n",(0,s.jsx)(t.h2,{id:"installation",children:"Installation"}),"\n",(0,s.jsxs)(t.ol,{children:["\n",(0,s.jsxs)(t.li,{children:["\n",(0,s.jsx)(t.p,{children:"Clone the repository:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-sh",children:"git clone https://github.com/gofiber/recipes.git\ncd recipes/todo-app-testcontainers-postgres\n"})}),"\n"]}),"\n",(0,s.jsxs)(t.li,{children:["\n",(0,s.jsx)(t.p,{children:"Install dependencies:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-sh",children:"go get\n"})}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(t.h2,{id:"running-the-application",children:"Running the Application"}),"\n",(0,s.jsxs)(t.ol,{children:["\n",(0,s.jsxs)(t.li,{children:["Start the application:","\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-sh",children:"air\n"})}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(t.h2,{id:"environment-variables",children:"Environment Variables"}),"\n",(0,s.jsxs)(t.p,{children:["Create a ",(0,s.jsx)(t.code,{children:".env"})," file in the root directory and add the following variables:"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-shell",children:"# PORT returns the server listening port\n# default: 8000\nPORT=\n\n# DB returns the name of the sqlite database\n# default: postgres://postgres:postgres@localhost:5432/postgres?sslmode=disable\n\n# TOKENKEY returns the jwt token secret\nTOKENKEY=\n\n# TOKENEXP returns the jwt token expiration duration.\n# Should be time.ParseDuration string. Source: https://golang.org/pkg/time/#ParseDuration\n# default: 10h\nTOKENEXP=\n\n# TESTCONTAINERS_RYUK_DISABLED disables the Ryuk container, to avoid removing the database container when the application is stopped.\n# default: true\nTESTCONTAINERS_RYUK_DISABLED=true\n"})})]})}function h(e={}){let{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},84429:function(e,t,n){n.d(t,{R:()=>o,x:()=>r});var i=n(96540);let s={},a=i.createContext(s);function o(e){let t=i.useContext(a);return i.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function r(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),i.createElement(a.Provider,{value:t},e.children)}}}]);