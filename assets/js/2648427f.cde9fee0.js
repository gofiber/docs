"use strict";(self.webpackChunkfiber_docs=self.webpackChunkfiber_docs||[]).push([["19711"],{92032:function(e,n,r){r.r(n),r.d(n,{frontMatter:()=>a,toc:()=>c,default:()=>o,metadata:()=>t,assets:()=>s,contentTitle:()=>l});var t=JSON.parse('{"id":"middleware/adaptor","title":"Adaptor","description":"The adaptor package converts between Fiber and net/http, letting you reuse handlers, middleware, and requests across both frameworks.","source":"@site/docs/core/middleware/adaptor.md","sourceDirName":"middleware","slug":"/middleware/adaptor","permalink":"/next/middleware/adaptor","draft":false,"unlisted":false,"editUrl":"https://github.com/gofiber/fiber/edit/main/docs/middleware/adaptor.md","tags":[],"version":"current","lastUpdatedAt":1762030608000,"frontMatter":{"id":"adaptor"},"sidebar":"left_sidebar","previous":{"title":"\u{1F9EC} Middleware","permalink":"/next/category/-middleware"},"next":{"title":"BasicAuth","permalink":"/next/middleware/basicauth"}}'),i=r(74848),d=r(84429);let a={id:"adaptor"},l="Adaptor",s={},c=[{value:"Features",id:"features",level:2},{value:"API Reference",id:"api-reference",level:2},{value:"Usage Examples",id:"usage-examples",level:2},{value:"1. Using <code>net/http</code> handlers in Fiber",id:"1-using-nethttp-handlers-in-fiber",level:3},{value:"2. Using <code>net/http</code> middleware with Fiber",id:"2-using-nethttp-middleware-with-fiber",level:3},{value:"3. Using Fiber handlers in <code>net/http</code>",id:"3-using-fiber-handlers-in-nethttp",level:3},{value:"4. Running a Fiber app in <code>net/http</code>",id:"4-running-a-fiber-app-in-nethttp",level:3},{value:"5. Converting a Fiber context (<code>fiber.Ctx</code>) to <code>http.Request</code>",id:"5-converting-a-fiber-context-fiberctx-to-httprequest",level:3},{value:"Summary",id:"summary",level:2}];function h(e){let n={admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,d.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"adaptor",children:"Adaptor"})}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"adaptor"})," package converts between Fiber and ",(0,i.jsx)(n.code,{children:"net/http"}),", letting you reuse handlers, middleware, and requests across both frameworks."]}),"\n",(0,i.jsx)(n.admonition,{type:"tip",children:(0,i.jsxs)(n.p,{children:["Fiber can register plain ",(0,i.jsx)(n.code,{children:"net/http"})," handlers directly\u2014just pass an ",(0,i.jsx)(n.code,{children:"http.Handler"}),",\n",(0,i.jsx)(n.code,{children:"http.HandlerFunc"}),", or ",(0,i.jsx)(n.code,{children:"func(http.ResponseWriter, *http.Request)"})," to any router\nmethod and it will be adapted automatically. The adaptor helpers remain valuable\nwhen you need to convert middleware, swap handler directions, or transform\nrequests explicitly."]})}),"\n",(0,i.jsx)(n.admonition,{title:"Fiber features are unavailable",type:"caution",children:(0,i.jsxs)(n.p,{children:["Even when you register them directly, adapted ",(0,i.jsx)(n.code,{children:"net/http"})," handlers still run with standard\nlibrary semantics. They don't have access to ",(0,i.jsx)(n.code,{children:"fiber.Ctx"}),", and the compatibility layer comes\nwith additional overhead compared to native Fiber handlers. Use them for interop and legacy\nscenarios, but prefer Fiber handlers when performance or Fiber-specific APIs matter."]})}),"\n",(0,i.jsx)(n.h2,{id:"features",children:"Features"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Convert ",(0,i.jsx)(n.code,{children:"net/http"})," handlers and middleware to Fiber handlers"]}),"\n",(0,i.jsxs)(n.li,{children:["Convert Fiber handlers to ",(0,i.jsx)(n.code,{children:"net/http"})," handlers"]}),"\n",(0,i.jsxs)(n.li,{children:["Convert a Fiber context (",(0,i.jsx)(n.code,{children:"fiber.Ctx"}),") into an ",(0,i.jsx)(n.code,{children:"http.Request"})]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"api-reference",children:"API Reference"}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Name"}),(0,i.jsx)(n.th,{children:"Signature"}),(0,i.jsx)(n.th,{children:"Description"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"HTTPHandler"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"HTTPHandler(h http.Handler) fiber.Handler"})}),(0,i.jsxs)(n.td,{children:["Converts ",(0,i.jsx)(n.code,{children:"http.Handler"})," to ",(0,i.jsx)(n.code,{children:"fiber.Handler"})]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"HTTPHandlerFunc"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"HTTPHandlerFunc(h http.HandlerFunc) fiber.Handler"})}),(0,i.jsxs)(n.td,{children:["Converts ",(0,i.jsx)(n.code,{children:"http.HandlerFunc"})," to ",(0,i.jsx)(n.code,{children:"fiber.Handler"})]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"HTTPMiddleware"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"HTTPMiddleware(mw func(http.Handler) http.Handler) fiber.Handler"})}),(0,i.jsxs)(n.td,{children:["Converts ",(0,i.jsx)(n.code,{children:"http.Handler"})," middleware to ",(0,i.jsx)(n.code,{children:"fiber.Handler"})," middleware"]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"FiberHandler"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"FiberHandler(h fiber.Handler) http.Handler"})}),(0,i.jsxs)(n.td,{children:["Converts ",(0,i.jsx)(n.code,{children:"fiber.Handler"})," to ",(0,i.jsx)(n.code,{children:"http.Handler"})]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"FiberHandlerFunc"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"FiberHandlerFunc(h fiber.Handler) http.HandlerFunc"})}),(0,i.jsxs)(n.td,{children:["Converts ",(0,i.jsx)(n.code,{children:"fiber.Handler"})," to ",(0,i.jsx)(n.code,{children:"http.HandlerFunc"})]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"FiberApp"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"FiberApp(app *fiber.App) http.HandlerFunc"})}),(0,i.jsxs)(n.td,{children:["Converts an entire Fiber app to a ",(0,i.jsx)(n.code,{children:"http.HandlerFunc"})]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"ConvertRequest"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"ConvertRequest(c fiber.Ctx, forServer bool) (*http.Request, error)"})}),(0,i.jsxs)(n.td,{children:["Converts ",(0,i.jsx)(n.code,{children:"fiber.Ctx"})," into a ",(0,i.jsx)(n.code,{children:"http.Request"})]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"CopyContextToFiberContext"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"CopyContextToFiberContext(context any, requestContext *fasthttp.RequestCtx)"})}),(0,i.jsxs)(n.td,{children:["Copies ",(0,i.jsx)(n.code,{children:"context.Context"})," to ",(0,i.jsx)(n.code,{children:"fasthttp.RequestCtx"})]})]})]})]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"usage-examples",children:"Usage Examples"}),"\n",(0,i.jsxs)(n.h3,{id:"1-using-nethttp-handlers-in-fiber",children:["1. Using ",(0,i.jsx)(n.code,{children:"net/http"})," handlers in Fiber"]}),"\n",(0,i.jsxs)(n.p,{children:["This example shows how to run a standard ",(0,i.jsx)(n.code,{children:"net/http"})," handler within a Fiber app\nwithout calling the adaptor explicitly:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'package main\n\nimport (\n    "fmt"\n    "net/http"\n    "github.com/gofiber/fiber/v3"\n)\n\nfunc main() {\n    app := fiber.New()\n\n    // Fiber adapts net/http handlers for you during registration\n    app.Get("/", http.HandlerFunc(helloHandler))\n\n    app.Listen(":3000")\n}\n\nfunc helloHandler(w http.ResponseWriter, r *http.Request) {\n    fmt.Fprint(w, "Hello from net/http!")\n}\n'})}),"\n",(0,i.jsxs)(n.p,{children:["If you prefer to reuse the converted handler in multiple places, you can still\nobtain it manually via ",(0,i.jsx)(n.code,{children:"github.com/gofiber/fiber/v3/middleware/adaptor"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'converted := adaptor.HTTPHandler(http.HandlerFunc(helloHandler))\napp.Get("/cached", converted)\n'})}),"\n",(0,i.jsxs)(n.h3,{id:"2-using-nethttp-middleware-with-fiber",children:["2. Using ",(0,i.jsx)(n.code,{children:"net/http"})," middleware with Fiber"]}),"\n",(0,i.jsxs)(n.p,{children:["Middleware written for ",(0,i.jsx)(n.code,{children:"net/http"})," can run inside Fiber:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'package main\n\nimport (\n    "log"\n    "net/http"\n    "github.com/gofiber/fiber/v3"\n    "github.com/gofiber/fiber/v3/middleware/adaptor"\n)\n\nfunc main() {\n    app := fiber.New()\n\n    // Apply an http middleware in Fiber\n    app.Use(adaptor.HTTPMiddleware(loggingMiddleware))\n\n    app.Get("/", func(c fiber.Ctx) error {\n        return c.SendString("Hello Fiber!")\n    })\n\n    app.Listen(":3000")\n}\n\nfunc loggingMiddleware(next http.Handler) http.Handler {\n    return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n        log.Println("Request received")\n        next.ServeHTTP(w, r)\n    })\n}\n'})}),"\n",(0,i.jsxs)(n.h3,{id:"3-using-fiber-handlers-in-nethttp",children:["3. Using Fiber handlers in ",(0,i.jsx)(n.code,{children:"net/http"})]}),"\n",(0,i.jsxs)(n.p,{children:["You can use Fiber handlers from ",(0,i.jsx)(n.code,{children:"net/http"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'package main\n\nimport (\n    "net/http"\n    "github.com/gofiber/fiber/v3"\n    "github.com/gofiber/fiber/v3/middleware/adaptor"\n)\n\nfunc main() {\n    // Convert a Fiber handler to an http.Handler\n    http.Handle("/", adaptor.FiberHandler(helloFiber))\n    \n    // Convert a Fiber handler to an http.HandlerFunc\n    http.HandleFunc("/func", adaptor.FiberHandlerFunc(helloFiber))\n    \n    http.ListenAndServe(":3000", nil)\n}\n\nfunc helloFiber(c fiber.Ctx) error {\n    return c.SendString("Hello from Fiber!")\n}\n'})}),"\n",(0,i.jsxs)(n.h3,{id:"4-running-a-fiber-app-in-nethttp",children:["4. Running a Fiber app in ",(0,i.jsx)(n.code,{children:"net/http"})]}),"\n",(0,i.jsxs)(n.p,{children:["You can wrap a full Fiber app inside ",(0,i.jsx)(n.code,{children:"net/http"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'package main\n\nimport (\n    "net/http"\n    "github.com/gofiber/fiber/v3"\n    "github.com/gofiber/fiber/v3/middleware/adaptor"\n)\n\nfunc main() {\n    app := fiber.New()\n    app.Get("/", func(c fiber.Ctx) error {\n        return c.SendString("Hello from Fiber!")\n    })\n\n    // Run Fiber inside an http server\n    http.ListenAndServe(":3000", adaptor.FiberApp(app))\n}\n'})}),"\n",(0,i.jsxs)(n.h3,{id:"5-converting-a-fiber-context-fiberctx-to-httprequest",children:["5. Converting a Fiber context (",(0,i.jsx)(n.code,{children:"fiber.Ctx"}),") to ",(0,i.jsx)(n.code,{children:"http.Request"})]}),"\n",(0,i.jsxs)(n.p,{children:["To access an ",(0,i.jsx)(n.code,{children:"http.Request"})," within a Fiber handler:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'package main\n\nimport (\n    "net/http"\n    "github.com/gofiber/fiber/v3"\n    "github.com/gofiber/fiber/v3/middleware/adaptor"\n)\n\nfunc main() {\n    app := fiber.New()\n    app.Get("/request", handleRequest)\n    app.Listen(":3000")\n}\n\nfunc handleRequest(c fiber.Ctx) error {\n    httpReq, err := adaptor.ConvertRequest(c, false)\n    if err != nil {\n        return err\n    }\n    return c.SendString("Converted Request URL: " + httpReq.URL.String())\n}\n'})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"summary",children:"Summary"}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"adaptor"})," package lets Fiber and ",(0,i.jsx)(n.code,{children:"net/http"})," interoperate so you can:"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Convert handlers and middleware in both directions"}),"\n",(0,i.jsxs)(n.li,{children:["Run Fiber apps inside ",(0,i.jsx)(n.code,{children:"net/http"})]}),"\n",(0,i.jsxs)(n.li,{children:["Convert ",(0,i.jsx)(n.code,{children:"fiber.Ctx"})," to ",(0,i.jsx)(n.code,{children:"http.Request"})]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"This makes it straightforward to integrate Fiber with existing Go projects or migrate between frameworks."})]})}function o(e={}){let{wrapper:n}={...(0,d.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(h,{...e})}):h(e)}},84429:function(e,n,r){r.d(n,{R:()=>a,x:()=>l});var t=r(96540);let i={},d=t.createContext(i);function a(e){let n=t.useContext(d);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),t.createElement(d.Provider,{value:n},e.children)}}}]);