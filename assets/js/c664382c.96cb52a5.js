"use strict";(self.webpackChunkfiber_docs=self.webpackChunkfiber_docs||[]).push([["62627"],{80043:function(e,n,r){r.r(n),r.d(n,{frontMatter:()=>c,toc:()=>h,default:()=>p,metadata:()=>t,assets:()=>d,contentTitle:()=>l});var t=JSON.parse('{"id":"partials/routing/route-handlers","title":"Route Handlers","description":"Registers a route bound to a specific HTTP method.","source":"@site/docs/core/partials/routing/handler.md","sourceDirName":"partials/routing","slug":"/partials/routing/route-handlers","permalink":"/next/partials/routing/route-handlers","draft":false,"unlisted":false,"editUrl":"https://github.com/gofiber/fiber/edit/main/docs/partials/routing/handler.md","tags":[],"version":"current","lastUpdatedAt":1762030608000,"frontMatter":{"id":"route-handlers","title":"Route Handlers"}}'),s=r(74848),a=r(84429),i=r(28891);let c={id:"route-handlers",title:"Route Handlers"},l,d={},h=[{value:"Fiber-native handlers (cases 1\u20132)",id:"fiber-native-handlers-cases-12",level:3},{value:"Express-style request handlers (cases 3\u20138)",id:"express-style-request-handlers-cases-38",level:3},{value:"net/http handlers (cases 9\u201311)",id:"nethttp-handlers-cases-911",level:3},{value:"fasthttp handlers (cases 12\u201313)",id:"fasthttp-handlers-cases-1213",level:3}];function o(e){let n={a:"a",admonition:"admonition",code:"code",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.p,{children:["Registers a route bound to a specific ",(0,s.jsx)(n.a,{href:"https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods",children:"HTTP method"}),"."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-go",metastring:'title="Signatures"',children:"// HTTP methods\nfunc (app *App) Get(path string, handler any, handlers ...any) Router\nfunc (app *App) Head(path string, handler any, handlers ...any) Router\nfunc (app *App) Post(path string, handler any, handlers ...any) Router\nfunc (app *App) Put(path string, handler any, handlers ...any) Router\nfunc (app *App) Delete(path string, handler any, handlers ...any) Router\nfunc (app *App) Connect(path string, handler any, handlers ...any) Router\nfunc (app *App) Options(path string, handler any, handlers ...any) Router\nfunc (app *App) Trace(path string, handler any, handlers ...any) Router\nfunc (app *App) Patch(path string, handler any, handlers ...any) Router\n\n// Add allows you to specify multiple methods at once\nfunc (app *App) Add(methods []string, path string, handler any, handlers ...any) Router\n\n// All will register the route on all HTTP methods\n// Almost the same as app.Use but not bound to prefixes\nfunc (app *App) All(path string, handler any, handlers ...any) Router\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Fiber's adapter converts a variety of handler shapes to native\n",(0,s.jsx)(n.code,{children:"func(fiber.Ctx) error"})," callbacks. It currently recognizes thirteen cases (the\nnumbers below match the comments in ",(0,s.jsx)(n.code,{children:"toFiberHandler"})," inside ",(0,s.jsx)(n.code,{children:"adapter.go"}),"). This\nlets you mix Fiber-style handlers with Express-style callbacks and even reuse\n",(0,s.jsx)(n.code,{children:"net/http"})," or ",(0,s.jsx)(n.code,{children:"fasthttp"})," functions."]}),"\n",(0,s.jsx)(n.h3,{id:"fiber-native-handlers-cases-12",children:"Fiber-native handlers (cases 1\u20132)"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Case 1."})," ",(0,s.jsx)(n.code,{children:"fiber.Handler"})," \u2014 the canonical ",(0,s.jsx)(n.code,{children:"func(fiber.Ctx) error"})," form."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Case 2."})," ",(0,s.jsx)(n.code,{children:"func(fiber.Ctx)"})," \u2014 Fiber runs the function and treats it as if it\nreturned ",(0,s.jsx)(n.code,{children:"nil"}),"."]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"express-style-request-handlers-cases-38",children:"Express-style request handlers (cases 3\u20138)"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Case 3."})," ",(0,s.jsx)(n.code,{children:"func(fiber.Req, fiber.Res) error"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Case 4."})," ",(0,s.jsx)(n.code,{children:"func(fiber.Req, fiber.Res)"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Case 5."})," ",(0,s.jsx)(n.code,{children:"func(fiber.Req, fiber.Res, func() error) error"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Case 6."})," ",(0,s.jsx)(n.code,{children:"func(fiber.Req, fiber.Res, func() error)"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Case 7."})," ",(0,s.jsx)(n.code,{children:"func(fiber.Req, fiber.Res, func()) error"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Case 8."})," ",(0,s.jsx)(n.code,{children:"func(fiber.Req, fiber.Res, func())"})]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["The adapter injects a ",(0,s.jsx)(n.code,{children:"next"})," callback when your signature accepts one. Fiber\npropagates downstream errors from ",(0,s.jsx)(n.code,{children:"c.Next()"})," back through the wrapper, so\nreturning those errors remains optional. If you never call the injected ",(0,s.jsx)(n.code,{children:"next"}),"\nfunction, the handler chain stops, matching Express semantics."]}),"\n",(0,s.jsx)(n.h3,{id:"nethttp-handlers-cases-911",children:"net/http handlers (cases 9\u201311)"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Case 9."})," ",(0,s.jsx)(n.code,{children:"http.HandlerFunc"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Case 10."})," ",(0,s.jsx)(n.code,{children:"http.Handler"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Case 11."})," ",(0,s.jsx)(n.code,{children:"func(http.ResponseWriter, *http.Request)"})]}),"\n"]}),"\n",(0,s.jsx)(n.admonition,{title:"Compatibility overhead",type:"caution",children:(0,s.jsxs)(n.p,{children:["Fiber adapts these handlers through ",(0,s.jsx)(n.code,{children:"fasthttpadaptor"}),". They do not receive\n",(0,s.jsx)(n.code,{children:"fiber.Ctx"}),", cannot call ",(0,s.jsx)(n.code,{children:"c.Next()"}),", and therefore always terminate the handler\nchain. The compatibility layer also adds more overhead than running a native\nFiber handler, so prefer the other forms when possible."]})}),"\n",(0,s.jsx)(n.h3,{id:"fasthttp-handlers-cases-1213",children:"fasthttp handlers (cases 12\u201313)"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Case 12."})," ",(0,s.jsx)(n.code,{children:"fasthttp.RequestHandler"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Case 13."})," ",(0,s.jsx)(n.code,{children:"func(*fasthttp.RequestCtx) error"})]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["fasthttp handlers run with full access to the underlying ",(0,s.jsx)(n.code,{children:"fasthttp.RequestCtx"}),".\nThey are expected to manage the response directly. Fiber will propagate any\nerror returned by the ",(0,s.jsx)(n.code,{children:"func(*fasthttp.RequestCtx) error"})," variant but otherwise\ndoes not inspect the context state."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-go",metastring:'title="Examples"',children:'// Simple GET handler (Fiber accepts both func(fiber.Ctx) and func(fiber.Ctx) error)\napp.Get("/api/list", func(c fiber.Ctx) error {\n    return c.SendString("I\'m a GET request!")\n})\n\n// Reuse an existing net/http handler without manual adaptation\nhttpHandler := http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n    w.WriteHeader(http.StatusNoContent)\n})\n\napp.Get("/foo", httpHandler)\n\n// Align with Express-style handlers using fiber.Req and fiber.Res helpers (works\n// for middleware and routes alike)\napp.Use(func(req fiber.Req, res fiber.Res, next func() error) error {\n    if req.IP() == "192.168.1.254" {\n        return res.SendStatus(fiber.StatusForbidden)\n    }\n    return next()\n})\n\napp.Get("/express", func(req fiber.Req, res fiber.Res) error {\n    return res.SendString("Hello from Express-style handlers!")\n})\n\n// Mount a fasthttp.RequestHandler directly\napp.Get("/bar", func(ctx *fasthttp.RequestCtx) {\n    ctx.SetStatusCode(fiber.StatusAccepted)\n})\n\n// Simple POST handler\napp.Post("/api/register", func(c fiber.Ctx) error {\n    return c.SendString("I\'m a POST request!")\n})\n'})}),"\n",(0,s.jsx)(i.A,{id:"use",children:"#Use"}),"\n",(0,s.jsxs)(n.p,{children:["Can be used for middleware packages and prefix catchers. Prefixes now require either an exact match or a slash boundary, so ",(0,s.jsx)(n.code,{children:"/john"})," matches ",(0,s.jsx)(n.code,{children:"/john"})," and ",(0,s.jsx)(n.code,{children:"/john/doe"})," but not ",(0,s.jsx)(n.code,{children:"/johnnnnn"}),". Parameter tokens like ",(0,s.jsx)(n.code,{children:":name"}),", ",(0,s.jsx)(n.code,{children:":name?"}),", ",(0,s.jsx)(n.code,{children:"*"}),", and ",(0,s.jsx)(n.code,{children:"+"})," are still expanded before the boundary check runs."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-go",metastring:'title="Signature"',children:"func (app *App) Use(args ...any) Router\n\n// Fiber inspects args to support these common usage patterns:\n// - app.Use(handler, handlers ...any)\n// - app.Use(path string, handler, handlers ...any)\n// - app.Use(paths []string, handler, handlers ...any)\n// - app.Use(path string, subApp *App)\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Each handler argument can independently be a Fiber handler (with or without an\n",(0,s.jsx)(n.code,{children:"error"})," return), an Express-style callback, a ",(0,s.jsx)(n.code,{children:"net/http"})," handler, or any other\nsupported shape including fasthttp callbacks that return errors."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-go",metastring:'title="Examples"',children:'// Match any request\napp.Use(func(c fiber.Ctx) error {\n    return c.Next()\n})\n\n// Match request starting with /api\napp.Use("/api", func(c fiber.Ctx) error {\n    return c.Next()\n})\n\n// Match requests starting with /api or /home (multiple-prefix support)\napp.Use([]string{"/api", "/home"}, func(c fiber.Ctx) error {\n    return c.Next()\n})\n\n// Attach multiple handlers \napp.Use("/api", func(c fiber.Ctx) error {\n    c.Set("X-Custom-Header", random.String(32))\n    return c.Next()\n}, func(c fiber.Ctx) error {\n    return c.Next()\n})\n\n// Mount a sub-app\napp.Use("/api", api)\n'})})]})}function p(e={}){let{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(o,{...e})}):o(e)}},28891:function(e,n,r){r.d(n,{A:()=>i});var t=r(74848);r(96540);var s=r(12801),a=r(13193);function i({children:e,id:n}){return(0,a.A)().collectAnchor(n),(0,t.jsx)(t.Fragment,{children:(0,t.jsxs)("div",{id:n,className:"reference anchor",children:[e,(0,t.jsx)(s.A,{to:"#"+n,className:"hash-link"})]})})}},84429:function(e,n,r){r.d(n,{R:()=>i,x:()=>c});var t=r(96540);let s={},a=t.createContext(s);function i(e){let n=t.useContext(a);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),t.createElement(a.Provider,{value:n},e.children)}}}]);