"use strict";(self.webpackChunkfiber_docs=self.webpackChunkfiber_docs||[]).push([["26440"],{26147:function(e,n,t){t.r(n),t.d(n,{frontMatter:()=>s,toc:()=>c,default:()=>h,metadata:()=>i,assets:()=>o,contentTitle:()=>l});var i=JSON.parse('{"id":"middleware/healthcheck","title":"Health Check","description":"Middleware that adds liveness, readiness, and startup probes to Fiber apps. It provides a generic handler you can mount on any route, with constants for the conventional /livez, /readyz, and /startupz endpoints.","source":"@site/docs/core/middleware/healthcheck.md","sourceDirName":"middleware","slug":"/middleware/healthcheck","permalink":"/next/middleware/healthcheck","draft":false,"unlisted":false,"editUrl":"https://github.com/gofiber/fiber/edit/main/docs/middleware/healthcheck.md","tags":[],"version":"current","lastUpdatedAt":1762030608000,"frontMatter":{"id":"healthcheck"},"sidebar":"left_sidebar","previous":{"title":"Favicon","permalink":"/next/middleware/favicon"},"next":{"title":"Helmet","permalink":"/next/middleware/helmet"}}'),r=t(74848),a=t(84429);let s={id:"healthcheck"},l="Health Check",o={},c=[{value:"Overview",id:"overview",level:2},{value:"Signatures",id:"signatures",level:2},{value:"Examples",id:"examples",level:2},{value:"Config",id:"config",level:2},{value:"Default Config",id:"default-config",level:2}];function d(e){let n={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"health-check",children:"Health Check"})}),"\n",(0,r.jsxs)(n.p,{children:["Middleware that adds liveness, readiness, and startup probes to ",(0,r.jsx)(n.a,{href:"https://github.com/gofiber/fiber",children:"Fiber"})," apps. It provides a generic handler you can mount on any route, with constants for the conventional ",(0,r.jsx)(n.code,{children:"/livez"}),", ",(0,r.jsx)(n.code,{children:"/readyz"}),", and ",(0,r.jsx)(n.code,{children:"/startupz"})," endpoints."]}),"\n",(0,r.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,r.jsx)(n.p,{children:"Register the middleware on any endpoint you want to expose a probe on. The package exports constants for the conventional liveness, readiness, and startup endpoints:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:"app.Get(healthcheck.LivenessEndpoint, healthcheck.New())\napp.Get(healthcheck.ReadinessEndpoint, healthcheck.New())\napp.Get(healthcheck.StartupEndpoint, healthcheck.New())\n"})}),"\n",(0,r.jsxs)(n.p,{children:["By default the probe returns ",(0,r.jsx)(n.code,{children:"true"}),", so each endpoint responds with ",(0,r.jsx)(n.code,{children:"200 OK"}),"; returning ",(0,r.jsx)(n.code,{children:"false"})," yields ",(0,r.jsx)(n.code,{children:"503 Service Unavailable"}),"."]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Liveness"}),": Checks if the server is running."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Readiness"}),": Checks if the application is ready to handle requests."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Startup"}),": Checks if the application has completed its startup sequence."]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"signatures",children:"Signatures"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:"func New(config ...Config) fiber.Handler\n"})}),"\n",(0,r.jsx)(n.h2,{id:"examples",children:"Examples"}),"\n",(0,r.jsx)(n.p,{children:"Import the middleware package:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:'import (\n    "github.com/gofiber/fiber/v3"\n    "github.com/gofiber/fiber/v3/middleware/healthcheck"\n)\n'})}),"\n",(0,r.jsx)(n.p,{children:"After your app is initialized, register the middleware on the endpoints you want to expose:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:'// Use the default probe on the conventional endpoints\napp.Get(healthcheck.LivenessEndpoint, healthcheck.New())\napp.Get(healthcheck.ReadinessEndpoint, healthcheck.New(healthcheck.Config{\n    Probe: func(c fiber.Ctx) bool {\n        return serviceA.Ready() && serviceB.Ready()\n    },\n}))\napp.Get(healthcheck.StartupEndpoint, healthcheck.New())\n\n// Register a custom endpoint\napp.Get("/healthz", healthcheck.New())\n'})}),"\n",(0,r.jsxs)(n.p,{children:["The middleware responds only to GET. Use ",(0,r.jsx)(n.code,{children:"app.All"})," to expose a probe on every method; other methods fall through to the next handler:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:'app.All("/healthz", healthcheck.New())\n'})}),"\n",(0,r.jsx)(n.h2,{id:"config",children:"Config"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:"type Config struct {\n    // Next defines a function to skip this middleware when it returns true. If this function returns true\n    // and no other handlers are defined for the route, Fiber will return a status 404 Not Found, since\n    // no other handlers were defined to return a different status.\n    //\n    // Optional. Default: nil\n    Next func(fiber.Ctx) bool\n\n    // Probe is executed to determine the current health state. It can be used for\n    // liveness, readiness or startup checks. Returning true indicates the application\n    // is healthy.\n    //\n    // Optional. Default: func(c fiber.Ctx) bool { return true }\n    Probe func(fiber.Ctx) bool\n}\n"})}),"\n",(0,r.jsx)(n.h2,{id:"default-config",children:"Default Config"}),"\n",(0,r.jsx)(n.p,{children:"The default configuration used by this middleware is defined as follows:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:"func defaultProbe(_ fiber.Ctx) bool { return true }\n\nvar ConfigDefault = Config{\n    Next:  nil,\n    Probe: defaultProbe,\n}\n"})})]})}function h(e={}){let{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},84429:function(e,n,t){t.d(n,{R:()=>s,x:()=>l});var i=t(96540);let r={},a=i.createContext(r);function s(e){let n=i.useContext(a);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),i.createElement(a.Provider,{value:n},e.children)}}}]);