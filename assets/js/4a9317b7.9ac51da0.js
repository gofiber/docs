"use strict";(self.webpackChunkfiber_docs=self.webpackChunkfiber_docs||[]).push([["54276"],{40933:function(e,n,t){t.r(n),t.d(n,{frontMatter:()=>o,toc:()=>d,default:()=>g,metadata:()=>i,assets:()=>l,contentTitle:()=>a});var i=JSON.parse('{"id":"redis/redis","title":"Redis","description":"Release","source":"@site/storage_versioned_docs/version-couchbase_v2.x.x/redis/README.md","sourceDirName":"redis","slug":"/redis/","permalink":"/storage/couchbase_v2.x.x/redis/","draft":false,"unlisted":false,"editUrl":"https://github.com/gofiber/storage/edit/main/redis/README.md","tags":[],"version":"couchbase_v2.x.x","lastUpdatedAt":1762030608000,"frontMatter":{"id":"redis","title":"Redis"},"sidebar":"left_sidebar","previous":{"title":"Postgres","permalink":"/storage/couchbase_v2.x.x/postgres/"},"next":{"title":"Ristretto","permalink":"/storage/couchbase_v2.x.x/ristretto/"}}'),s=t(74848),r=t(84429);let o={id:"redis",title:"Redis"},a,l={},d=[{value:"Table of Contents",id:"table-of-contents",level:3},{value:"Signatures",id:"signatures",level:3},{value:"Installation",id:"installation",level:3},{value:"Examples",id:"examples",level:3},{value:"Config",id:"config",level:3},{value:"Default Config",id:"default-config",level:3},{value:"Using an Existing Redis Connection",id:"using-an-existing-redis-connection",level:3},{value:"Example: Using DragonflyDB",id:"example-using-dragonflydb",level:3}];function c(e){let n={a:"a",blockquote:"blockquote",br:"br",code:"code",h3:"h3",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.img,{src:"https://img.shields.io/github/v/tag/gofiber/storage?filter=redis*",alt:"Release"}),"\n",(0,s.jsx)(n.a,{href:"https://gofiber.io/discord",children:(0,s.jsx)(n.img,{src:"https://img.shields.io/discord/704680098577514527?style=flat&label=%F0%9F%92%AC%20discord&color=00ACD7",alt:"Discord"})}),"\n",(0,s.jsx)(n.img,{src:"https://img.shields.io/github/actions/workflow/status/gofiber/storage/test-redis.yml?label=Tests",alt:"Test"})]}),"\n",(0,s.jsxs)(n.p,{children:["A Redis storage driver using ",(0,s.jsx)(n.a,{href:"https://github.com/go-redis/redis",children:"go-redis/redis"}),"."]}),"\n",(0,s.jsx)(n.h3,{id:"table-of-contents",children:"Table of Contents"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#signatures",children:"Signatures"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#installation",children:"Installation"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#examples",children:"Examples"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#config",children:"Config"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#default-config",children:"Default Config"})}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"signatures",children:"Signatures"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-go",children:"func New(config ...Config) Storage\nfunc NewFromConnection(conn redis.UniversalClient) *Storage\nfunc (s *Storage) Get(key string) ([]byte, error)\nfunc (s *Storage) GetWithContext(ctx context.Context, key string) ([]byte, error)\nfunc (s *Storage) Set(key string, val []byte, exp time.Duration) error\nfunc (s *Storage) SetWithContext(ctx context.Context, key string, val []byte, exp time.Duration) error\nfunc (s *Storage) Delete(key string) error\nfunc (s *Storage) DeleteWithContext(ctx context.Context, key string) error\nfunc (s *Storage) Reset() error\nfunc (s *Storage) ResetWithContext(ctx context.Context) error\nfunc (s *Storage) Close() error\nfunc (s *Storage) Conn() redis.UniversalClient\nfunc (s *Storage) Keys() ([][]byte, error)\n"})}),"\n",(0,s.jsx)(n.h3,{id:"installation",children:"Installation"}),"\n",(0,s.jsxs)(n.p,{children:["Redis is tested on the 2 last ",(0,s.jsx)(n.a,{href:"https://golang.org/dl/",children:"Go versions"})," with support for modules. So make sure to initialize one first if you didn't do that yet:"]}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Note:"})," You can also use ",(0,s.jsx)(n.a,{href:"https://dragonflydb.io/",children:"DragonflyDB"})," as a Redis replacement.\nSince DragonflyDB is fully compatible with the Redis API, you can use it exactly like Redis ",(0,s.jsx)(n.strong,{children:"without any code changes"}),".\n",(0,s.jsx)(n.a,{href:"#example-using-dragonflydb",children:"Example"})]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"go mod init github.com/<user>/<repo>\n"})}),"\n",(0,s.jsx)(n.p,{children:"And then install the redis implementation:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"go get github.com/gofiber/storage/redis/v3\n"})}),"\n",(0,s.jsx)(n.h3,{id:"examples",children:"Examples"}),"\n",(0,s.jsx)(n.p,{children:"Import the storage package."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-go",children:'import "github.com/gofiber/storage/redis/v3"\n'})}),"\n",(0,s.jsx)(n.p,{children:"You can use the one of the following options to create a Redis Storage:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-go",children:'// Initialize default config\nstore := redis.New()\n\n// Initialize custom config\nstore := redis.New(redis.Config{\n	Host:      "127.0.0.1",\n	Port:      6379,\n	Username:  "",\n	Password:  "",\n	Database:  0,\n	Reset:     false,\n	TLSConfig: nil,\n	PoolSize:  10 * runtime.GOMAXPROCS(0),\n})\n\n// Initialize Redis Failover Client\nstore := redis.New(redis.Config{\n	MasterName:       "master-name",\n	Addrs:            []string{":6379"},\n})\n\n// Initialize Redis Cluster Client\nstore := redis.New(redis.Config{\n	Addrs:            []string{":6379", ":6380"},\n})\n\n// Initialize AWS ElastiCache Redis Cluster with Configuration Endpoint\nstore := redis.New(redis.Config{\n	Addrs:         []string{"cluster.xxxxx.cache.amazonaws.com:6379"},\n	IsClusterMode: true,\n})\n\n// Create a client with support for TLS\ncer, err := tls.LoadX509KeyPair("./client.crt", "./client.key")\nif err != nil {\n	log.Println(err)\n	return\n}\ntlsCfg := &tls.Config{\n	MinVersion:               tls.VersionTLS12,\n	InsecureSkipVerify:       true,\n	Certificates:             []tls.Certificate{cer},\n}\nstore = redis.New(redis.Config{\n	URL:     	"redis://<user>:<pass>@127.0.0.1:6379/<db>",\n	TLSConfig: 	tlsCfg,\n	Reset:    	false,\n})\n\n// Create a client with a Redis URL with all information.\nstore = redis.New(redis.Config{\n	URL:     "redis://<user>:<pass>@127.0.0.1:6379/<db>",\n	Reset:    false,\n})\n'})}),"\n",(0,s.jsx)(n.h3,{id:"config",children:"Config"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-go",children:'type Config struct {\n	// Host name where the DB is hosted\n	//\n	// Optional. Default is "127.0.0.1"\n	Host string\n\n	// Port where the DB is listening on\n	//\n	// Optional. Default is 6379\n	Port int\n\n	// Server username\n	//\n	// Optional. Default is ""\n	Username string\n\n	// Server password\n	//\n	// Optional. Default is ""\n	Password string\n\n	// Database to be selected after connecting to the server.\n	//\n	// Optional. Default is 0\n	Database int\n\n	// URL standard format Redis URL. If this is set all other config options, Host, Port, Username, Password, Database have no effect.\n	//\n	// Example: redis://<user>:<pass>@localhost:6379/<db>\n	// Optional. Default is ""\n	URL string\n\n	// Either a single address or a seed list of host:port addresses, this enables FailoverClient and ClusterClient\n	//\n	// Optional. Default is []string{}\n	Addrs []string\n\n	// MasterName is the sentinel master\'s name\n	//\n	// Optional. Default is ""\n	MasterName string\n\n	// ClientName will execute the `CLIENT SETNAME ClientName` command for each conn.\n	//\n	// Optional. Default is ""\n	ClientName string\n\n	// SentinelUsername\n	//\n	// Optional. Default is ""\n	SentinelUsername string\n\n	// SentinelPassword\n	//\n	// Optional. Default is ""\n	SentinelPassword string\n\n	// Reset clears any existing keys in existing Collection\n	//\n	// Optional. Default is false\n	Reset bool\n\n	// TLS Config to use. When set TLS will be negotiated.\n	//\n	// Optional. Default is nil\n	TLSConfig *tls.Config\n\n	// Maximum number of socket connections.\n	//\n	// Optional. Default is 10 connections per every available CPU as reported by runtime.GOMAXPROCS.\n	PoolSize int\n\n	// IsClusterMode forces cluster mode even with single address.\n	// Useful for AWS ElastiCache Configuration Endpoints.\n	//\n	// Optional. Default is false\n	IsClusterMode bool\n}\n'})}),"\n",(0,s.jsx)(n.h3,{id:"default-config",children:"Default Config"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-go",children:'var ConfigDefault = Config{\n	Host:                  "127.0.0.1",\n	Port:                  6379,\n	Username:              "",\n	Password:              "",\n	URL:                   "",\n	Database:              0,\n	Reset:                 false,\n	TLSConfig:             nil,\n	PoolSize:              10 * runtime.GOMAXPROCS(0),\n	Addrs:                 []string{},\n	MasterName:            "",\n	ClientName:            "",\n	SentinelUsername:      "",\n	SentinelPassword:      "",\n	IsClusterMode:         false,\n}\n'})}),"\n",(0,s.jsx)(n.h3,{id:"using-an-existing-redis-connection",children:"Using an Existing Redis Connection"}),"\n",(0,s.jsx)(n.p,{children:"If you already have a Redis client configured in your application, you can create a Storage instance directly from that client. This is useful when you want to share an existing connection throughout your application instead of creating a new one."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-go",children:'import (\n    "github.com/gofiber/storage/redis"\n    redigo "github.com/redis/go-redis/v9"\n    "fmt"\n    "context"\n)\n\nfunc main() {\n    // Create or reuse a Redis universal client (e.g., redis.NewClient, redis.NewClusterClient, etc.)\n    client := redigo.NewUniversalClient(&redigo.UniversalOptions{\n        Addrs: []string{"127.0.0.1:6379"},\n    })\n\n    // Create a new Storage instance from the existing Redis client\n    store := redis.NewFromConnection(client)\n\n    // Set a value\n    if err := store.Set("john", []byte("doe"), 0); err != nil {\n        panic(err)\n    }\n\n    // Get the value\n    val, err := store.Get("john")\n    if err != nil {\n        panic(err)\n    }\n    fmt.Println("Stored value:", string(val))\n\n    // Clean up\n    store.Close()\n}\n'})}),"\n",(0,s.jsx)(n.h3,{id:"example-using-dragonflydb",children:"Example: Using DragonflyDB"}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Note:"})," You can use ",(0,s.jsx)(n.a,{href:"https://dragonflydb.io/",children:"DragonflyDB"})," in the same way as Redis.",(0,s.jsx)(n.br,{}),"\n","Simply start a DragonflyDB server and configure it just like Redis. Then, call ",(0,s.jsx)(n.code,{children:"New()"})," and use it exactly as you would with Redis."]}),"\n"]})]})}function g(e={}){let{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}},84429:function(e,n,t){t.d(n,{R:()=>o,x:()=>a});var i=t(96540);let s={},r=i.createContext(s);function o(e){let n=i.useContext(r);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),i.createElement(r.Provider,{value:n},e.children)}}}]);