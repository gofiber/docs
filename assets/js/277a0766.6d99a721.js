"use strict";(self.webpackChunkfiber_docs=self.webpackChunkfiber_docs||[]).push([["1286"],{92627:function(e,t,n){n.r(t),n.d(t,{frontMatter:()=>o,toc:()=>l,default:()=>h,metadata:()=>r,assets:()=>c,contentTitle:()=>a});var r=JSON.parse('{"id":"testhelpers/tck/README","title":"Test Compatibility Kit (TCK) for Storage Implementations","description":"The Test Compatibility Kit (TCK) is a standardized test suite for validating storage implementations in the Fiber Storage repository. It provides a comprehensive set of tests that ensure all storage backends behave consistently and correctly implement the storage.Storage interface.","source":"@site/docs/storage/testhelpers/tck/README.md","sourceDirName":"testhelpers/tck","slug":"/testhelpers/tck/","permalink":"/storage/next/testhelpers/tck/","draft":false,"unlisted":false,"editUrl":"https://github.com/gofiber/storage/edit/main/testhelpers/tck/README.md","tags":[],"version":"current","lastUpdatedAt":1762030608000,"frontMatter":{},"sidebar":"left_sidebar","previous":{"title":"SurrealDB","permalink":"/storage/next/surrealdb/"},"next":{"title":"Valkey","permalink":"/storage/next/valkey/"}}'),i=n(74848),s=n(84429);let o={},a="Test Compatibility Kit (TCK) for Storage Implementations",c={},l=[{value:"Overview",id:"overview",level:2},{value:"Why Use the TCK?",id:"why-use-the-tck",level:2},{value:"Core Concepts",id:"core-concepts",level:2},{value:"TCKSuite Interface",id:"tcksuite-interface",level:3},{value:"Test Execution Modes",id:"test-execution-modes",level:3},{value:"Implementation Guide: Example",id:"implementation-guide-example",level:2},{value:"Step 1: Define Your TCK Implementation",id:"step-1-define-your-tck-implementation",level:3},{value:"Step 2: Implement Container Creation",id:"step-2-implement-container-creation",level:3},{value:"Step 3: Create and Run the TCK Test",id:"step-3-create-and-run-the-tck-test",level:3},{value:"Key Implementation Guidelines",id:"key-implementation-guidelines",level:2},{value:"1. Generic Type Parameters",id:"1-generic-type-parameters",level:3},{value:"2. Error Handling",id:"2-error-handling",level:3},{value:"3. Container Cleanup",id:"3-container-cleanup",level:3},{value:"4. Configuration",id:"4-configuration",level:3},{value:"5. Context Handling",id:"5-context-handling",level:3},{value:"Testing Different Scenarios",id:"testing-different-scenarios",level:2},{value:"PerTest Mode (Recommended)",id:"pertest-mode-recommended",level:3},{value:"PerSuite Mode",id:"persuite-mode",level:3},{value:"Troubleshooting",id:"troubleshooting",level:2},{value:"Common Issues",id:"common-issues",level:3},{value:"Best Practices",id:"best-practices",level:3},{value:"Complete Example Template",id:"complete-example-template",level:2}];function d(e){let t={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.header,{children:(0,i.jsx)(t.h1,{id:"test-compatibility-kit-tck-for-storage-implementations",children:"Test Compatibility Kit (TCK) for Storage Implementations"})}),"\n",(0,i.jsxs)(t.p,{children:["The Test Compatibility Kit (TCK) is a standardized test suite for validating storage implementations in the Fiber Storage repository. It provides a comprehensive set of tests that ensure all storage backends behave consistently and correctly implement the ",(0,i.jsx)(t.code,{children:"storage.Storage"})," interface."]}),"\n",(0,i.jsx)(t.h2,{id:"overview",children:"Overview"}),"\n",(0,i.jsxs)(t.p,{children:["The TCK leverages ",(0,i.jsx)(t.a,{href:"https://github.com/stretchr/testify#suite-package",children:"testify/suite"})," to provide a structured testing approach with setup/teardown hooks and consistent test execution. It automatically tests all core storage operations including:"]}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:"Basic CRUD operations (Set, Get, Delete)"}),"\n",(0,i.jsx)(t.li,{children:"Context-aware operations (SetWithContext, GetWithContext, etc.)"}),"\n",(0,i.jsx)(t.li,{children:"TTL (Time-To-Live) functionality"}),"\n",(0,i.jsx)(t.li,{children:"Storage reset and cleanup"}),"\n",(0,i.jsxs)(t.li,{children:["Connection handling for stores that implement ",(0,i.jsx)(t.code,{children:"StorageWithConn"})]}),"\n"]}),"\n",(0,i.jsx)(t.h2,{id:"why-use-the-tck",children:"Why Use the TCK?"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Consistency"}),": Ensures all storage implementations behave identically"]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Completeness"}),": Tests all required storage interface methods"]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Maintenance"}),": Reduces test code duplication across storage implementations"]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Quality"}),": Provides comprehensive edge case and error condition testing"]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Integration"}),": Works seamlessly with testcontainers for isolated testing"]}),"\n"]}),"\n",(0,i.jsx)(t.h2,{id:"core-concepts",children:"Core Concepts"}),"\n",(0,i.jsx)(t.h3,{id:"tcksuite-interface",children:"TCKSuite Interface"}),"\n",(0,i.jsxs)(t.p,{children:["To use the TCK, you must implement the ",(0,i.jsx)(t.code,{children:"TCKSuite"})," interface:"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-go",children:"// TCKSuite is the interface that must be implemented by the test suite.\n// It defines how to create a new store with a container.\n// The generic parameters are the storage type, the driver type returned by the Conn method,\n// and the container type used to back the storage.\n//\n// IMPORTANT: The container type must exist as a Testcontainers module.\n// Please refer to the [testcontainers] package for more information.\ntype TCKSuite[T storage.Storage, D any, C testcontainers.Container] interface {\n	// NewStore is a function that returns a new store.\n	// It is called by the [New] function to create a new store.\n	NewStore() func(ctx context.Context, tb testing.TB, ctr C) (T, error)\n\n	// NewContainer is a function that returns a new container.\n	// It is called by the [New] function to create a new container.\n	NewContainer() func(ctx context.Context, tb testing.TB) (C, error)\n}\n"})}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.strong,{children:"Generic Parameters:"})}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:"T"}),": Your concrete storage type (e.g., ",(0,i.jsx)(t.code,{children:"*mysql.Storage"}),")"]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:"D"}),": The driver type returned by ",(0,i.jsx)(t.code,{children:"Conn()"})," method (e.g., ",(0,i.jsx)(t.code,{children:"*sql.DB"}),")"]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:"C"}),": The testcontainer type (e.g., ",(0,i.jsx)(t.code,{children:"*mysql.MySQLContainer"}),")"]}),"\n"]}),"\n",(0,i.jsxs)(t.p,{children:["Please verify that a suitable Testcontainers module exists for your container type. See the ",(0,i.jsx)(t.a,{href:"https://testcontainers.com/modules/?language=go",children:"Testcontainers modules catalog"})," for details."]}),"\n",(0,i.jsx)(t.h3,{id:"test-execution-modes",children:"Test Execution Modes"}),"\n",(0,i.jsx)(t.p,{children:"The TCK supports two execution modes:"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"PerTest"})," (default): Creates a new container and storage instance for each test"]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"PerSuite"}),": Creates one container and storage instance for the entire test suite"]}),"\n"]}),"\n",(0,i.jsx)(t.h2,{id:"implementation-guide-example",children:"Implementation Guide: Example"}),"\n",(0,i.jsx)(t.p,{children:"Here's how to implement TCK tests for a new storage backend:"}),"\n",(0,i.jsx)(t.h3,{id:"step-1-define-your-tck-implementation",children:"Step 1: Define Your TCK Implementation"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-go",children:"// ExampleStorageTCK is the test suite for the Example storage.\ntype ExampleStorageTCK struct{}\n\n// NewStore is a function that returns a new Example storage.\n// It implements the [tck.TCKSuite] interface, allowing the TCK to create a new Example storage\n// from the container created by the TCK.\nfunc (s *ExampleStorageTCK) NewStore() func(ctx context.Context, tb testing.TB, ctr *ExampleContainer) (*Storage, error) {\n    return func(ctx context.Context, tb testing.TB, ctr *example.Container) (*Storage, error) {\n        // Use container APIs to get connection details\n        conn, err := ctr.ConnectionString(ctx)\n        require.NoError(tb, err)\n\n        store := New(Config{\n            // Apply the storage-specific configuration\n            ConnectionURI: conn,\n            Reset:         true,\n        })\n\n        return store, nil\n    }\n}\n\n// NewContainer is a function that returns a new Example container.\n// It implements the [tck.TCKSuite] interface, allowing the TCK to create a new Example container\n// for the Example storage.\nfunc (s *ExampleStorageTCK) NewContainer() func(ctx context.Context, tb testing.TB) (*example.Container, error) {\n    return func(ctx context.Context, tb testing.TB) (*example.Container, error) {\n        return mustStartExample(tb), nil\n    }\n}\n"})}),"\n",(0,i.jsx)(t.h3,{id:"step-2-implement-container-creation",children:"Step 2: Implement Container Creation"}),"\n",(0,i.jsx)(t.p,{children:"Create a helper function to start your storage backend's container:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-go",children:'func mustStartExample(t testing.TB) *example.Container {\n    img := exampleImage\n    if imgFromEnv := os.Getenv(exampleImageEnvVar); imgFromEnv != "" {\n        img = imgFromEnv\n    }\n\n    ctx := context.Background()\n\n    c, err := example.Run(ctx, img,\n        example.WithOptionA("valueA"),\n        example.WithOptionB("valueB"),\n        testcontainers.WithWaitStrategy(\n            wait.ForListeningPort("examplePort/tcp"),\n        ),\n    )\n    testcontainers.CleanupContainer(t, c)\n    require.NoError(t, err)\n\n    return c\n}\n'})}),"\n",(0,i.jsx)(t.h3,{id:"step-3-create-and-run-the-tck-test",children:"Step 3: Create and Run the TCK Test"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-go",children:"func TestExampleStorageTCK(t *testing.T) {\n    // Create the TCK suite with proper generic type parameters\n    s, err := tck.New[*ExampleStorage, *ExampleDriver, *ExampleContainer](\n        context.Background(), \n        t, \n        &ExampleStorageTCK{}, \n        tck.PerTest(), // or tck.PerSuite() for suite-level containers\n    )\n    require.NoError(t, err)\n\n    // Run all TCK tests\n    suite.Run(t, s)\n}\n"})}),"\n",(0,i.jsx)(t.h2,{id:"key-implementation-guidelines",children:"Key Implementation Guidelines"}),"\n",(0,i.jsx)(t.h3,{id:"1-generic-type-parameters",children:"1. Generic Type Parameters"}),"\n",(0,i.jsxs)(t.p,{children:["When calling ",(0,i.jsx)(t.code,{children:"tck.New"}),", specify the correct type parameters:"]}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:"T"}),": Your storage pointer type (e.g., ",(0,i.jsx)(t.code,{children:"*Storage"}),")"]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:"D"}),": The driver type returned by ",(0,i.jsx)(t.code,{children:"Conn()"})," (or ",(0,i.jsx)(t.code,{children:"any"})," if not applicable)"]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:"C"}),": The container type returned by ",(0,i.jsx)(t.code,{children:"NewContainer()"})]}),"\n"]}),"\n",(0,i.jsx)(t.h3,{id:"2-error-handling",children:"2. Error Handling"}),"\n",(0,i.jsxs)(t.p,{children:["Always use ",(0,i.jsx)(t.code,{children:"require.NoError(tb, err)"})," in your factory functions to ensure test failures are properly reported."]}),"\n",(0,i.jsx)(t.h3,{id:"3-container-cleanup",children:"3. Container Cleanup"}),"\n",(0,i.jsxs)(t.p,{children:["The TCK handles container cleanup, but ensure your ",(0,i.jsx)(t.code,{children:"mustStart*"})," helpers call ",(0,i.jsx)(t.code,{children:"testcontainers.CleanupContainer(t, container)"}),". For ad\u2011hoc tests outside the TCK, call ",(0,i.jsx)(t.code,{children:"CleanupContainer"})," to avoid leaving containers running until the test process exits. Although Ryuk will prune them, it\u2019s better to clean up immediately."]}),"\n",(0,i.jsx)(t.h3,{id:"4-configuration",children:"4. Configuration"}),"\n",(0,i.jsx)(t.p,{children:"Configure your storage with appropriate test settings:"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:["Enable ",(0,i.jsx)(t.code,{children:"Reset: true"})," if your storage supports it"]}),"\n",(0,i.jsx)(t.li,{children:"Use test-specific database/namespace names"}),"\n",(0,i.jsx)(t.li,{children:"Configure appropriate timeouts and connection limits"}),"\n"]}),"\n",(0,i.jsx)(t.h3,{id:"5-context-handling",children:"5. Context Handling"}),"\n",(0,i.jsxs)(t.p,{children:["Always respect the provided ",(0,i.jsx)(t.code,{children:"context.Context"})," in your factory functions, especially for container startup and storage initialization."]}),"\n",(0,i.jsx)(t.h2,{id:"testing-different-scenarios",children:"Testing Different Scenarios"}),"\n",(0,i.jsx)(t.h3,{id:"pertest-mode-recommended",children:"PerTest Mode (Recommended)"}),"\n",(0,i.jsx)(t.p,{children:"Use when you need complete isolation between tests:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-go",children:"s, err := tck.New[*Storage, *sql.DB](ctx, t, &ExampleStorageTCK{}, tck.PerTest())\n"})}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.strong,{children:"Pros:"})}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:"Complete test isolation"}),"\n",(0,i.jsx)(t.li,{children:"No cross-test contamination"}),"\n",(0,i.jsx)(t.li,{children:"Easier debugging of individual test failures"}),"\n"]}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.strong,{children:"Cons:"})}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:"Slower execution due to container startup overhead"}),"\n",(0,i.jsx)(t.li,{children:"Higher resource usage, although mitigated by Testcontainers' cleanup mechanism"}),"\n"]}),"\n",(0,i.jsx)(t.h3,{id:"persuite-mode",children:"PerSuite Mode"}),"\n",(0,i.jsx)(t.p,{children:"Use when container startup is expensive and tests can share state:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-go",children:"s, err := tck.New[*Storage, *sql.DB](ctx, t, &ExampleStorageTCK{}, tck.PerSuite())\n"})}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.strong,{children:"Pros:"})}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:"Faster execution"}),"\n",(0,i.jsx)(t.li,{children:"Lower resource usage"}),"\n"]}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.strong,{children:"Cons:"})}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:"Tests may affect each other"}),"\n",(0,i.jsx)(t.li,{children:"Requires careful state management"}),"\n"]}),"\n",(0,i.jsx)(t.h2,{id:"troubleshooting",children:"Troubleshooting"}),"\n",(0,i.jsx)(t.h3,{id:"common-issues",children:"Common Issues"}),"\n",(0,i.jsxs)(t.ol,{children:["\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Wrong Generic Types"}),": Ensure type parameters match your actual storage and driver types"]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Container Startup Failures"}),": Check wait strategies and ensure proper service readiness"]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Connection Issues"}),": Verify connection strings and authentication in your ",(0,i.jsx)(t.code,{children:"NewStore()"})," implementation"]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Test Isolation"}),": If tests interfere with each other, consider switching from ",(0,i.jsx)(t.code,{children:"PerSuite"})," to ",(0,i.jsx)(t.code,{children:"PerTest"})]}),"\n"]}),"\n",(0,i.jsx)(t.h3,{id:"best-practices",children:"Best Practices"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:"Use environment variables for container image versions"}),"\n",(0,i.jsx)(t.li,{children:"Implement proper wait strategies for container readiness"}),"\n",(0,i.jsx)(t.li,{children:"Include cleanup calls even though TCK handles them automatically"}),"\n",(0,i.jsxs)(t.li,{children:["Test your TCK implementation with both ",(0,i.jsx)(t.code,{children:"PerTest"})," and ",(0,i.jsx)(t.code,{children:"PerSuite"})," modes"]}),"\n",(0,i.jsx)(t.li,{children:"Use meaningful test data that won't conflict across parallel test runs"}),"\n"]}),"\n",(0,i.jsx)(t.h2,{id:"complete-example-template",children:"Complete Example Template"}),"\n",(0,i.jsx)(t.p,{children:"Here's a complete template for implementing TCK tests for a new storage backend:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-go",children:'package newstorage\n\nimport (\n    "context"\n    "os"\n    "testing"\n    \n    "github.com/gofiber/storage/testhelpers/tck"\n    "github.com/stretchr/testify/require"\n    "github.com/stretchr/testify/suite"\n    "github.com/testcontainers/testcontainers-go"\n    // Import your specific testcontainer module\n)\n\nconst (\n    defaultImage = "your-storage-image:latest"\n    imageEnvVar  = "TEST_YOUR_STORAGE_IMAGE"\n)\n\ntype YourStorageTCK struct{}\n\nfunc (s *YourStorageTCK) NewStore() func(ctx context.Context, tb testing.TB, ctr *YourContainer) (*Storage, error) {\n    return func(ctx context.Context, tb testing.TB, ctr *YourContainer) (*Storage, error) {\n        // Get connection details from container\n        conn, err := ctr.ConnectionString(ctx)\n        require.NoError(tb, err)\n\n        // Create and configure your storage\n        store := New(Config{\n            ConnectionURI: conn,\n            Reset:         true,\n            // Add other test-specific configuration\n        })\n\n        return store, nil\n    }\n}\n\nfunc (s *YourStorageTCK) NewContainer() func(ctx context.Context, tb testing.TB) (*YourContainer, error) {\n    return func(ctx context.Context, tb testing.TB) (*YourContainer, error) {\n        return mustStartYourStorage(tb), nil\n    }\n}\n\nfunc mustStartYourStorage(t testing.TB) *YourContainer {\n    img := defaultImage\n    if imgFromEnv := os.Getenv(imageEnvVar); imgFromEnv != "" {\n        img = imgFromEnv\n    }\n\n    ctx := context.Background()\n\n    c, err := yourstorage.Run(ctx, img,\n        // Add your storage-specific configuration\n        testcontainers.WithWaitStrategy(\n            // Add appropriate wait strategies\n        ),\n    )\n    testcontainers.CleanupContainer(t, c)\n    require.NoError(t, err)\n\n    return c\n}\n\nfunc TestYourStorageTCK(t *testing.T) {\n    s, err := tck.New[*Storage, YourDriverType, *YourContainer](\n        context.Background(),\n        t,\n        &YourStorageTCK{},\n        tck.PerTest(),\n    )\n    require.NoError(t, err)\n\n    suite.Run(t, s)\n}\n'})}),"\n",(0,i.jsx)(t.p,{children:"This template provides a solid foundation for implementing TCK tests for any new storage backend in the Fiber Storage repository."})]})}function h(e={}){let{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},84429:function(e,t,n){n.d(t,{R:()=>o,x:()=>a});var r=n(96540);let i={},s=r.createContext(i);function o(e){let t=r.useContext(s);return r.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),r.createElement(s.Provider,{value:t},e.children)}}}]);