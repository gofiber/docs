"use strict";(self.webpackChunkfiber_docs=self.webpackChunkfiber_docs||[]).push([["30829"],{42156:function(e,n,t){t.r(n),t.d(n,{frontMatter:()=>c,toc:()=>d,default:()=>u,metadata:()=>r,assets:()=>o,contentTitle:()=>a});var r=JSON.parse('{"id":"api/services","title":"\u{1F961} Services","description":"Services wrap external dependencies. Register them in the application\'s state, and Fiber starts and stops them automatically\u2014useful during development and testing.","source":"@site/docs/core/api/services.md","sourceDirName":"api","slug":"/api/services","permalink":"/next/api/services","draft":false,"unlisted":false,"editUrl":"https://github.com/gofiber/fiber/edit/main/docs/api/services.md","tags":[],"version":"current","lastUpdatedAt":1762030608000,"sidebarPosition":9,"frontMatter":{"id":"services","title":"\u{1F961} Services","sidebar_position":9},"sidebar":"left_sidebar","previous":{"title":"\u{1F5C2}\uFE0F State Management","permalink":"/next/api/state"},"next":{"title":"\u{1F4CB} Constants","permalink":"/next/api/constants"}}'),i=t(74848),s=t(84429);let c={id:"services",title:"\u{1F961} Services",sidebar_position:9},a,o={},d=[{value:"Service Interface",id:"service-interface",level:2},{value:"Definition",id:"definition",level:3},{value:"Service Methods",id:"service-methods",level:2},{value:"Start",id:"start",level:3},{value:"String",id:"string",level:3},{value:"State",id:"state",level:3},{value:"Terminate",id:"terminate",level:3},{value:"Comprehensive Examples",id:"comprehensive-examples",level:2},{value:"Example: Adding a Service",id:"example-adding-a-service",level:3},{value:"Example: Add a service with the Store middleware",id:"example-add-a-service-with-the-store-middleware",level:3}];function l(e){let n={a:"a",code:"code",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.p,{children:"Services wrap external dependencies. Register them in the application's state, and Fiber starts and stops them automatically\u2014useful during development and testing."}),"\n",(0,i.jsxs)(n.p,{children:["After adding a service to the app configuration, Fiber starts it on launch and stops it during shutdown. Retrieve a service from state with ",(0,i.jsx)(n.code,{children:"GetService"})," or ",(0,i.jsx)(n.code,{children:"MustGetService"})," (see ",(0,i.jsx)(n.a,{href:"./state",children:"State Management"}),")."]}),"\n",(0,i.jsx)(n.h2,{id:"service-interface",children:"Service Interface"}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"Service"})," interface defines methods a service must implement."]}),"\n",(0,i.jsx)(n.h3,{id:"definition",children:"Definition"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"type Service interface {\n    // Start starts the service, returning an error if it fails.\n    Start(ctx context.Context) error\n\n    // String returns a string representation of the service.\n    // It is used to print a human-readable name of the service in the startup message.\n    String() string\n\n    // State returns the current state of the service.\n    State(ctx context.Context) (string, error)\n\n    // Terminate terminates the service, returning an error if it fails.\n    Terminate(ctx context.Context) error\n}\n"})}),"\n",(0,i.jsx)(n.h2,{id:"service-methods",children:"Service Methods"}),"\n",(0,i.jsx)(n.h3,{id:"start",children:"Start"}),"\n",(0,i.jsx)(n.p,{children:"Starts the service. Fiber calls this when the application starts."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"func (s *SomeService) Start(ctx context.Context) error\n"})}),"\n",(0,i.jsx)(n.h3,{id:"string",children:"String"}),"\n",(0,i.jsx)(n.p,{children:"Returns a string representation of the service, used to print the service in the startup message."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"func (s *SomeService) String() string\n"})}),"\n",(0,i.jsx)(n.h3,{id:"state",children:"State"}),"\n",(0,i.jsx)(n.p,{children:"Reports the current state of the service for the startup message."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"func (s *SomeService) State(ctx context.Context) (string, error)\n"})}),"\n",(0,i.jsx)(n.h3,{id:"terminate",children:"Terminate"}),"\n",(0,i.jsx)(n.p,{children:"Stops the service after the application shuts down using a post-shutdown hook."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"func (s *SomeService) Terminate(ctx context.Context) error\n"})}),"\n",(0,i.jsx)(n.h2,{id:"comprehensive-examples",children:"Comprehensive Examples"}),"\n",(0,i.jsx)(n.h3,{id:"example-adding-a-service",children:"Example: Adding a Service"}),"\n",(0,i.jsx)(n.p,{children:"This example demonstrates how to add a Redis store as a service to the application, backed by the Testcontainers Redis Go module."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'package main\n\nimport (\n    "context"\n    "fmt"\n    "log"\n    "time"\n\n    "github.com/gofiber/fiber/v3"\n    "github.com/redis/go-redis/v9"\n    tcredis "github.com/testcontainers/testcontainers-go/modules/redis"\n)\n\nconst redisServiceName = "redis-store"\n\ntype redisService struct {\n    ctr *tcredis.RedisContainer\n}\n\n// Start initializes and starts the service. It implements the [fiber.Service] interface.\nfunc (s *redisService) Start(ctx context.Context) error {\n    // start the service\n    c, err := tcredis.Run(ctx, "redis:latest")\n    if err != nil {\n        return err\n    }\n\n    s.ctr = c\n    return nil\n}\n\n// String returns a string representation of the service.\n// It is used to print a human-readable name of the service in the startup message.\n// It implements the [fiber.Service] interface.\nfunc (s *redisService) String() string {\n    return redisServiceName\n}\n\n// State returns the current state of the service.\n// It implements the [fiber.Service] interface.\nfunc (s *redisService) State(ctx context.Context) (string, error) {\n    state, err := s.ctr.State(ctx)\n    if err != nil {\n        return "", fmt.Errorf("container state: %w", err)\n    }\n\n    return state.Status, nil\n}\n\n// Terminate stops and removes the service. It implements the [fiber.Service] interface.\nfunc (s *redisService) Terminate(ctx context.Context) error {\n    // stop the service\n    return s.ctr.Terminate(ctx)\n}\n\nfunc main() {\n    cfg := &fiber.Config{}\n\n    // Initialize service.\n    cfg.Services = append(cfg.Services, &redisService{})\n\n    // Define a context provider for the services startup.\n    // This is useful to cancel the startup of the services if the context is canceled.\n    // Default is context.Background().\n    startupCtx, cancel := context.WithTimeout(context.Background(), 10*time.Second)\n    defer cancel()\n    cfg.ServicesStartupContextProvider = func() context.Context {\n        return startupCtx\n    }\n\n    // Define a context provider for the services shutdown.\n    // This is useful to cancel the shutdown of the services if the context is canceled.\n    // Default is context.Background().\n    shutdownCtx, cancel := context.WithTimeout(context.Background(), 10*time.Second)\n    defer cancel()\n    cfg.ServicesShutdownContextProvider = func() context.Context {\n        return shutdownCtx\n    }\n\n    app := fiber.New(*cfg)\n\n    ctx := context.Background()\n\n    // Obtain the Redis service from the application\'s State.\n    redisSrv, ok := fiber.GetService[*redisService](app.State(), redisServiceName)\n    if !ok || redisSrv == nil {\n        log.Printf("Redis service not found")\n        return\n    }\n\n    // Obtain the connection string from the service.\n    connString, err := redisSrv.ctr.ConnectionString(ctx)\n    if err != nil {\n        log.Printf("Could not get connection string: %v", err)\n        return\n    }\n\n    // Parse the connection string to create a Redis client.\n    options, err := redis.ParseURL(connString)\n    if err != nil {\n        log.Printf("failed to parse connection string: %s", err)\n        return\n    }\n\n    // Initialize the Redis client.\n    rdb := redis.NewClient(options)\n\n    // Check the Redis connection.\n    if err := rdb.Ping(ctx).Err(); err != nil {\n        log.Fatalf("Could not connect to Redis: %v", err)\n    }\n\n    app.Listen(":3000")\n}\n\n'})}),"\n",(0,i.jsx)(n.h3,{id:"example-add-a-service-with-the-store-middleware",children:"Example: Add a service with the Store middleware"}),"\n",(0,i.jsx)(n.p,{children:"This example shows how to use services with the Store middleware for dependency injection. It uses a Redis store backed by the Testcontainers Redis module."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'package main\n\nimport (\n    "context"\n    "encoding/json"\n    "fmt"\n    "log"\n    "time"\n\n    "github.com/gofiber/fiber/v3"\n    "github.com/gofiber/fiber/v3/middleware/logger"\n    redisStore "github.com/gofiber/storage/redis/v3"\n    "github.com/redis/go-redis/v9"\n    tcredis "github.com/testcontainers/testcontainers-go/modules/redis"\n)\n\nconst (\n    redisServiceName = "redis-store"\n)\n\ntype User struct {\n    ID    int    `json:"id"`\n    Name  string `json:"name"`\n    Email string `json:"email"`\n}\n\ntype redisService struct {\n    ctr *tcredis.RedisContainer\n}\n\n// Start initializes and starts the service. It implements the [fiber.Service] interface.\nfunc (s *redisService) Start(ctx context.Context) error {\n    // start the service\n    c, err := tcredis.Run(ctx, "redis:latest")\n    if err != nil {\n        return err\n    }\n\n    s.ctr = c\n    return nil\n}\n\n// String returns a string representation of the service.\n// It is used to print a human-readable name of the service in the startup message.\n// It implements the [fiber.Service] interface.\nfunc (s *redisService) String() string {\n    return redisServiceName\n}\n\n// State returns the current state of the service.\n// It implements the [fiber.Service] interface.\nfunc (s *redisService) State(ctx context.Context) (string, error) {\n    state, err := s.ctr.State(ctx)\n    if err != nil {\n        return "", fmt.Errorf("container state: %w", err)\n    }\n\n    return state.Status, nil\n}\n\n// Terminate stops and removes the service. It implements the [fiber.Service] interface.\nfunc (s *redisService) Terminate(ctx context.Context) error {\n    // stop the service\n    return s.ctr.Terminate(ctx)\n}\n\nfunc main() {\n    cfg := &fiber.Config{}\n\n    // Initialize service.\n    cfg.Services = append(cfg.Services, &redisService{})\n\n    // Define a context provider for the services startup.\n    // This is useful to cancel the startup of the services if the context is canceled.\n    // Default is context.Background().\n    startupCtx, cancel := context.WithTimeout(context.Background(), 10*time.Second)\n    defer cancel()\n    cfg.ServicesStartupContextProvider = func() context.Context {\n        return startupCtx\n    }\n\n    // Define a context provider for the services shutdown.\n    // This is useful to cancel the shutdown of the services if the context is canceled.\n    // Default is context.Background().\n    shutdownCtx, cancel := context.WithTimeout(context.Background(), 10*time.Second)\n    defer cancel()\n    cfg.ServicesShutdownContextProvider = func() context.Context {\n        return shutdownCtx\n    }\n\n    app := fiber.New(*cfg)\n\n    // Initialize default config\n    app.Use(logger.New())\n\n    ctx := context.Background()\n\n    // Obtain the Redis service from the application\'s State.\n    redisSrv, ok := fiber.GetService[*redisService](app.State(), redisServiceName)\n    if !ok || redisSrv == nil {\n        log.Printf("Redis service not found")\n        return\n    }\n\n    // Obtain the connection string from the service.\n    connString, err := redisSrv.ctr.ConnectionString(ctx)\n    if err != nil {\n        log.Printf("Could not get connection string: %v", err)\n        return\n    }\n\n    // define a GoFiber session store, backed by the Redis service\n    store := redisStore.New(redisStore.Config{\n        URL: connString,\n    })\n\n    app.Post("/user/create", func(c fiber.Ctx) error {\n        var user User\n        if err := c.Bind().JSON(&user); err != nil {\n            return c.Status(fiber.StatusBadRequest).SendString(err.Error())\n        }\n\n        json, err := json.Marshal(user)\n        if err != nil {\n            return c.Status(fiber.StatusInternalServerError).SendString(err.Error())\n        }\n\n        // Save the user to the database.\n        err = store.Set(user.Email, json, time.Hour*24)\n        if err != nil {\n            return c.Status(fiber.StatusInternalServerError).SendString(err.Error())\n        }\n\n        return c.JSON(user)\n    })\n\n    app.Get("/user/:id", func(c fiber.Ctx) error {\n        id := c.Params("id")\n\n        user, err := store.Get(id)\n        if err == redis.Nil {\n            return c.Status(fiber.StatusNotFound).SendString("User not found")\n        } else if err != nil {\n            return c.Status(fiber.StatusInternalServerError).SendString(err.Error())\n        }\n\n        return c.JSON(string(user))\n    })\n\n    app.Listen(":3000")\n}\n\n'})})]})}function u(e={}){let{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(l,{...e})}):l(e)}},84429:function(e,n,t){t.d(n,{R:()=>c,x:()=>a});var r=t(96540);let i={},s=r.createContext(i);function c(e){let n=r.useContext(s);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:c(e.components),r.createElement(s.Provider,{value:n},e.children)}}}]);