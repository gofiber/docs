"use strict";(self.webpackChunkfiber_docs=self.webpackChunkfiber_docs||[]).push([["77427"],{76509:function(e,t,r){r.r(t),r.d(t,{frontMatter:()=>s,toc:()=>c,default:()=>h,metadata:()=>n,assets:()=>d,contentTitle:()=>o});var n=JSON.parse('{"id":"otel/otel","title":"OTel","description":"Release","source":"@site/docs/contrib/otel/README.md","sourceDirName":"otel","slug":"/otel/","permalink":"/contrib/next/otel/","draft":false,"unlisted":false,"editUrl":"https://github.com/gofiber/contrib/edit/main/otel/README.md","tags":[],"version":"current","lastUpdatedAt":1762030608000,"frontMatter":{"id":"otel"},"sidebar":"left_sidebar","previous":{"title":"OPA","permalink":"/contrib/next/opa/"},"next":{"title":"Example","permalink":"/contrib/next/otel/example/"}}'),i=r(74848),l=r(84429);let s={id:"otel"},o="OTel",d={},c=[{value:"Go version support",id:"go-version-support",level:2},{value:"Install",id:"install",level:2},{value:"Signature",id:"signature",level:2},{value:"Config",id:"config",level:2},{value:"Usage",id:"usage",level:2},{value:"Example",id:"example",level:2}];function a(e){let t={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",img:"img",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,l.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.header,{children:(0,i.jsx)(t.h1,{id:"otel",children:"OTel"})}),"\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.img,{src:"https://img.shields.io/github/v/tag/gofiber/contrib?filter=otel*",alt:"Release"}),"\n",(0,i.jsx)(t.a,{href:"https://gofiber.io/discord",children:(0,i.jsx)(t.img,{src:"https://img.shields.io/discord/704680098577514527?style=flat&label=%F0%9F%92%AC%20discord&color=00ACD7",alt:"Discord"})}),"\n",(0,i.jsx)(t.img,{src:"https://github.com/gofiber/contrib/workflows/Test%20otel/badge.svg",alt:"Test"})]}),"\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.a,{href:"https://opentelemetry.io/",children:"OpenTelemetry"})," support for Fiber."]}),"\n",(0,i.jsxs)(t.p,{children:["This package is listed on the ",(0,i.jsx)(t.a,{href:"https://opentelemetry.io/registry/instrumentation-go-fiber/",children:"OpenTelemetry Registry"}),"."]}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.strong,{children:"Compatible with Fiber v3."})}),"\n",(0,i.jsx)(t.h2,{id:"go-version-support",children:"Go version support"}),"\n",(0,i.jsxs)(t.p,{children:["We only support the latest two versions of Go. Visit ",(0,i.jsx)(t.a,{href:"https://go.dev/doc/devel/release",children:"https://go.dev/doc/devel/release"})," for more information."]}),"\n",(0,i.jsx)(t.h2,{id:"install",children:"Install"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-sh",children:"go get -u github.com/gofiber/contrib/v3/otel\n"})}),"\n",(0,i.jsx)(t.h2,{id:"signature",children:"Signature"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-go",children:"otel.Middleware(opts ...otel.Option) fiber.Handler\n"})}),"\n",(0,i.jsx)(t.h2,{id:"config",children:"Config"}),"\n",(0,i.jsx)(t.p,{children:"You can configure the middleware using functional parameters"}),"\n",(0,i.jsxs)(t.table,{children:[(0,i.jsx)(t.thead,{children:(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.th,{style:{textAlign:"left"},children:"Function"}),(0,i.jsx)(t.th,{style:{textAlign:"left"},children:"Argument Type"}),(0,i.jsx)(t.th,{style:{textAlign:"left"},children:"Description"}),(0,i.jsx)(t.th,{style:{textAlign:"left"},children:"Default"})]})}),(0,i.jsxs)(t.tbody,{children:[(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{style:{textAlign:"left"},children:(0,i.jsx)(t.code,{children:"WithNext"})}),(0,i.jsx)(t.td,{style:{textAlign:"left"},children:(0,i.jsx)(t.code,{children:"func(fiber.Ctx) bool"})}),(0,i.jsx)(t.td,{style:{textAlign:"left"},children:"Define a function to skip this middleware when returned true ."}),(0,i.jsx)(t.td,{style:{textAlign:"left"},children:"nil"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{style:{textAlign:"left"},children:(0,i.jsx)(t.code,{children:"WithTracerProvider"})}),(0,i.jsx)(t.td,{style:{textAlign:"left"},children:(0,i.jsx)(t.code,{children:"oteltrace.TracerProvider"})}),(0,i.jsx)(t.td,{style:{textAlign:"left"},children:"Specifies a tracer provider to use for creating a tracer."}),(0,i.jsx)(t.td,{style:{textAlign:"left"},children:"nil - the global tracer provider is used"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{style:{textAlign:"left"},children:(0,i.jsx)(t.code,{children:"WithMeterProvider"})}),(0,i.jsx)(t.td,{style:{textAlign:"left"},children:(0,i.jsx)(t.code,{children:"otelmetric.MeterProvider"})}),(0,i.jsx)(t.td,{style:{textAlign:"left"},children:"Specifies a meter provider to use for reporting."}),(0,i.jsx)(t.td,{style:{textAlign:"left"},children:"nil - the global meter provider is used"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{style:{textAlign:"left"},children:(0,i.jsx)(t.code,{children:"WithPort"})}),(0,i.jsx)(t.td,{style:{textAlign:"left"},children:(0,i.jsx)(t.code,{children:"int"})}),(0,i.jsxs)(t.td,{style:{textAlign:"left"},children:["Specifies the value to use when setting the ",(0,i.jsx)(t.code,{children:"net.host.port"})," attribute on metrics/spans."]}),(0,i.jsxs)(t.td,{style:{textAlign:"left"},children:["Defaults to (",(0,i.jsx)(t.code,{children:"80"})," for ",(0,i.jsx)(t.code,{children:"http"}),", ",(0,i.jsx)(t.code,{children:"443"})," for ",(0,i.jsx)(t.code,{children:"https"}),")"]})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{style:{textAlign:"left"},children:(0,i.jsx)(t.code,{children:"WithPropagators"})}),(0,i.jsx)(t.td,{style:{textAlign:"left"},children:(0,i.jsx)(t.code,{children:"propagation.TextMapPropagator"})}),(0,i.jsx)(t.td,{style:{textAlign:"left"},children:"Specifies propagators to use for extracting information from the HTTP requests."}),(0,i.jsx)(t.td,{style:{textAlign:"left"},children:"If none are specified, global ones will be used"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsxs)(t.td,{style:{textAlign:"left"},children:["(\u274C ",(0,i.jsx)(t.strong,{children:"Removed"}),") ",(0,i.jsx)(t.code,{children:"WithServerName"})]}),(0,i.jsx)(t.td,{style:{textAlign:"left"},children:(0,i.jsx)(t.code,{children:"string"})}),(0,i.jsxs)(t.td,{style:{textAlign:"left"},children:["This option was removed because the ",(0,i.jsx)(t.code,{children:"http.server_name"})," attribute is deprecated in the OpenTelemetry semantic conventions. Beginning with v1.21.0, the recommended attribute is ",(0,i.jsx)(t.code,{children:"server.address"}),", which this middleware already fills with the hostname reported by Fiber."]}),(0,i.jsx)(t.td,{style:{textAlign:"left"},children:"-"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{style:{textAlign:"left"},children:(0,i.jsx)(t.code,{children:"WithSpanNameFormatter"})}),(0,i.jsx)(t.td,{style:{textAlign:"left"},children:(0,i.jsx)(t.code,{children:"func(fiber.Ctx) string"})}),(0,i.jsx)(t.td,{style:{textAlign:"left"},children:"Takes a function that will be called on every request and the returned string will become the span Name."}),(0,i.jsx)(t.td,{style:{textAlign:"left"},children:"Default formatter returns the route pathRaw"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{style:{textAlign:"left"},children:(0,i.jsx)(t.code,{children:"WithCustomAttributes"})}),(0,i.jsx)(t.td,{style:{textAlign:"left"},children:(0,i.jsx)(t.code,{children:"func(fiber.Ctx) []attribute.KeyValue"})}),(0,i.jsx)(t.td,{style:{textAlign:"left"},children:"Define a function to add custom attributes to the span."}),(0,i.jsx)(t.td,{style:{textAlign:"left"},children:"nil"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{style:{textAlign:"left"},children:(0,i.jsx)(t.code,{children:"WithCustomMetricAttributes"})}),(0,i.jsx)(t.td,{style:{textAlign:"left"},children:(0,i.jsx)(t.code,{children:"func(fiber.Ctx) []attribute.KeyValue"})}),(0,i.jsx)(t.td,{style:{textAlign:"left"},children:"Define a function to add custom attributes to the metrics."}),(0,i.jsx)(t.td,{style:{textAlign:"left"},children:"nil"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{style:{textAlign:"left"},children:(0,i.jsx)(t.code,{children:"WithCollectClientIP"})}),(0,i.jsx)(t.td,{style:{textAlign:"left"},children:(0,i.jsx)(t.code,{children:"bool"})}),(0,i.jsx)(t.td,{style:{textAlign:"left"},children:"Specifies whether to collect the client's IP address from the request."}),(0,i.jsx)(t.td,{style:{textAlign:"left"},children:"true"})]})]})]}),"\n",(0,i.jsx)(t.h2,{id:"usage",children:"Usage"}),"\n",(0,i.jsxs)(t.p,{children:["Please refer to ",(0,i.jsx)(t.a,{href:"./example",children:"example"})]}),"\n",(0,i.jsx)(t.h2,{id:"example",children:"Example"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-go",children:'package main\n\nimport (\n    "context"\n    "errors"\n    "log"\n\n    "go.opentelemetry.io/otel/sdk/resource"\n\n    "github.com/gofiber/fiber/v3"\n\n    fiberotel "github.com/gofiber/contrib/v3/otel"\n    "go.opentelemetry.io/otel"\n    "go.opentelemetry.io/otel/attribute"\n    stdout "go.opentelemetry.io/otel/exporters/stdout/stdouttrace"\n\n    //"go.opentelemetry.io/otel/exporters/jaeger"\n    "go.opentelemetry.io/otel/propagation"\n    sdktrace "go.opentelemetry.io/otel/sdk/trace"\n    semconv "go.opentelemetry.io/otel/semconv/v1.21.0"\n    oteltrace "go.opentelemetry.io/otel/trace"\n)\n\nvar tracer = otel.Tracer("fiber-server")\n\nfunc main() {\n    tp := initTracer()\n    defer func() {\n        if err := tp.Shutdown(context.Background()); err != nil {\n            log.Printf("Error shutting down tracer provider: %v", err)\n        }\n    }()\n\n    app := fiber.New()\n\n    app.Use(fiberotel.Middleware())\n\n    app.Get("/error", func(ctx fiber.Ctx) error {\n        return errors.New("abc")\n    })\n\n    app.Get("/users/:id", func(c fiber.Ctx) error {\n        id := c.Params("id")\n        name := getUser(c.UserContext(), id)\n        return c.JSON(fiber.Map{"id": id, "name": name})\n    })\n\n    log.Fatal(app.Listen(":3000"))\n}\n\nfunc initTracer() *sdktrace.TracerProvider {\n    exporter, err := stdout.New(stdout.WithPrettyPrint())\n    if err != nil {\n        log.Fatal(err)\n    }\n    tp := sdktrace.NewTracerProvider(\n        sdktrace.WithSampler(sdktrace.AlwaysSample()),\n        sdktrace.WithBatcher(exporter),\n        sdktrace.WithResource(\n            resource.NewWithAttributes(\n                semconv.SchemaURL,\n                semconv.ServiceNameKey.String("my-service"),\n            )),\n    )\n    otel.SetTracerProvider(tp)\n    otel.SetTextMapPropagator(propagation.NewCompositeTextMapPropagator(propagation.TraceContext{}, propagation.Baggage{}))\n    return tp\n}\n\nfunc getUser(ctx context.Context, id string) string {\n    _, span := tracer.Start(ctx, "getUser", oteltrace.WithAttributes(attribute.String("id", id)))\n    defer span.End()\n    if id == "123" {\n        return "otel tester"\n    }\n    return "unknown"\n}\n'})})]})}function h(e={}){let{wrapper:t}={...(0,l.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(a,{...e})}):a(e)}},84429:function(e,t,r){r.d(t,{R:()=>s,x:()=>o});var n=r(96540);let i={},l=n.createContext(i);function s(e){let t=n.useContext(l);return n.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),n.createElement(l.Provider,{value:t},e.children)}}}]);