"use strict";(self.webpackChunkfiber_docs=self.webpackChunkfiber_docs||[]).push([["37325"],{46303:function(e,n,t){t.r(n),t.d(n,{frontMatter:()=>o,toc:()=>d,default:()=>l,metadata:()=>i,assets:()=>a,contentTitle:()=>c});var i=JSON.parse('{"id":"testcontainers/testcontainers","title":"Testcontainers","description":"Release","source":"@site/contrib_versioned_docs/version-testcontainers_v0.x.x/testcontainers/README.md","sourceDirName":"testcontainers","slug":"/testcontainers/","permalink":"/contrib/testcontainers_v0.x.x/testcontainers/","draft":false,"unlisted":false,"editUrl":"https://github.com/gofiber/contrib/edit/main/testcontainers/README.md","tags":[],"version":"testcontainers_v0.x.x","lastUpdatedAt":1762030608000,"frontMatter":{"id":"testcontainers"},"sidebar":"left_sidebar","previous":{"title":"Swagger","permalink":"/contrib/testcontainers_v0.x.x/swagger/"},"next":{"title":"Websocket","permalink":"/contrib/testcontainers_v0.x.x/websocket/"}}'),r=t(74848),s=t(84429);let o={id:"testcontainers"},c="Testcontainers",a={},d=[{value:"Common Use Cases",id:"common-use-cases",level:2},{value:"Install",id:"install",level:2},{value:"Signature",id:"signature",level:2},{value:"NewModuleConfig",id:"newmoduleconfig",level:3},{value:"NewContainerConfig",id:"newcontainerconfig",level:3},{value:"AddService",id:"addservice",level:3},{value:"Types",id:"types",level:2},{value:"Config",id:"config",level:3},{value:"ContainerService",id:"containerservice",level:3},{value:"Signature",id:"signature-1",level:4},{value:"Key",id:"key",level:5},{value:"Container",id:"container",level:5},{value:"Start",id:"start",level:5},{value:"String",id:"string",level:5},{value:"State",id:"state",level:5},{value:"Terminate",id:"terminate",level:5},{value:"Common Errors",id:"common-errors",level:3},{value:"Examples",id:"examples",level:2},{value:"Adding a module container using the Testcontainers Go&#39;s Redis module",id:"adding-a-module-container-using-the-testcontainers-gos-redis-module",level:3},{value:"Adding a custom container using the Testcontainers Go package",id:"adding-a-custom-container-using-the-testcontainers-go-package",level:3}];function h(e){let n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",h5:"h5",header:"header",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"testcontainers",children:"Testcontainers"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.img,{src:"https://img.shields.io/github/v/tag/gofiber/contrib?filter=testcontainers*",alt:"Release"}),"\n",(0,r.jsx)(n.a,{href:"https://gofiber.io/discord",children:(0,r.jsx)(n.img,{src:"https://img.shields.io/discord/704680098577514527?style=flat&label=%F0%9F%92%AC%20discord&color=00ACD7",alt:"Discord"})}),"\n",(0,r.jsx)(n.img,{src:"https://github.com/gofiber/contrib/workflows/Test%20Testcontainers%20Services/badge.svg",alt:"Test"})]}),"\n",(0,r.jsxs)(n.p,{children:["A ",(0,r.jsx)(n.a,{href:"https://golang.testcontainers.org/",children:"Testcontainers"})," Service Implementation for Fiber."]}),"\n",(0,r.jsx)(n.admonition,{type:"note",children:(0,r.jsxs)(n.p,{children:["Requires Go ",(0,r.jsx)(n.strong,{children:"1.23"})," and above"]})}),"\n",(0,r.jsx)(n.h2,{id:"common-use-cases",children:"Common Use Cases"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Local development"}),"\n",(0,r.jsx)(n.li,{children:"Integration testing"}),"\n",(0,r.jsx)(n.li,{children:"Isolated service testing"}),"\n",(0,r.jsx)(n.li,{children:"End-to-end testing"}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"install",children:"Install"}),"\n",(0,r.jsx)(n.admonition,{type:"caution",children:(0,r.jsxs)(n.p,{children:["This Service Implementation only supports Fiber ",(0,r.jsx)(n.strong,{children:"v3"}),"."]})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-shell",children:"go get -u github.com/gofiber/fiber/v3\ngo get -u github.com/gofiber/contrib/testcontainers\n"})}),"\n",(0,r.jsx)(n.h2,{id:"signature",children:"Signature"}),"\n",(0,r.jsx)(n.h3,{id:"newmoduleconfig",children:"NewModuleConfig"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:"// NewModuleConfig creates a new container service config for a module.\n//\n// - The serviceKey is the key used to identify the service in the Fiber app's state.\n// - The img is the image name to use for the container.\n// - The run is the function to use to run the container. It's usually the Run function from the module, like [redis.Run] or [postgres.Run].\n// - The opts are the functional options to pass to the run function. This argument is optional.\nfunc NewModuleConfig[T testcontainers.Container](\n serviceKey string,\n img string,\n run func(ctx context.Context, img string, opts ...testcontainers.ContainerCustomizer) (T, error),\n opts ...testcontainers.ContainerCustomizer,\n) Config[T] {\n"})}),"\n",(0,r.jsx)(n.h3,{id:"newcontainerconfig",children:"NewContainerConfig"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:"// NewContainerConfig creates a new container service config for a generic container type,\n// not created by a Testcontainers module. So this function best used in combination with\n// the [AddService] function to add a custom container to the Fiber app's state.\n//\n// - The serviceKey is the key used to identify the service in the Fiber app's state.\n// - The img is the image name to use for the container.\n// - The opts are the functional options to pass to the [testcontainers.Run] function. This argument is optional.\n//\n// This function uses the [testcontainers.Run] function as the run function.\nfunc NewContainerConfig[T *testcontainers.DockerContainer](serviceKey string, img string, opts ...testcontainers.ContainerCustomizer) Config[*testcontainers.DockerContainer]\n"})}),"\n",(0,r.jsx)(n.h3,{id:"addservice",children:"AddService"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:"// AddService adds a Testcontainers container as a [fiber.Service] for the Fiber app.\n// It returns a pointer to a [ContainerService[T]] object, which contains the key used to identify\n// the service in the Fiber app's state, and an error if the config is nil.\n// The container should be a function like redis.Run or postgres.Run that returns a container type\n// which embeds [testcontainers.Container].\n// - The cfg is the Fiber app's configuration, needed to add the service to the Fiber app's state.\n// - The containerConfig is the configuration for the container, where:\n//   - The containerConfig.ServiceKey is the key used to identify the service in the Fiber app's state.\n//   - The containerConfig.Run is the function to use to run the container. It's usually the Run function from the module, like redis.Run or postgres.Run.\n//   - The containerConfig.Image is the image to use for the container.\n//   - The containerConfig.Options are the functional options to pass to the [testcontainers.Run] function. This argument is optional.\n//\n// Use [NewModuleConfig] or [NewContainerConfig] helper functions to create valid containerConfig objects.\nfunc AddService[T testcontainers.Container](cfg *fiber.Config, containerConfig Config[T]) (*ContainerService[T], error) {\n"})}),"\n",(0,r.jsx)(n.h2,{id:"types",children:"Types"}),"\n",(0,r.jsx)(n.h3,{id:"config",children:"Config"}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"Config"})," type is a generic type that is used to configure the container."]}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Property"}),(0,r.jsx)(n.th,{children:"Type"}),(0,r.jsx)(n.th,{children:"Description"}),(0,r.jsx)(n.th,{children:"Default"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"ServiceKey"}),(0,r.jsx)(n.td,{children:"string"}),(0,r.jsx)(n.td,{children:"The key used to identify the service in the Fiber app's state."}),(0,r.jsx)(n.td,{children:"-"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"Image"}),(0,r.jsx)(n.td,{children:"string"}),(0,r.jsx)(n.td,{children:"The image name to use for the container."}),(0,r.jsx)(n.td,{children:"-"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"Run"}),(0,r.jsx)(n.td,{children:"func(ctx context.Context, img string, opts ...testcontainers.ContainerCustomizer) (T, error)"}),(0,r.jsx)(n.td,{children:"The function to use to run the container. It's usually the Run function from the testcontainers-go module, like redis.Run or postgres.Run"}),(0,r.jsx)(n.td,{children:"-"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"Options"}),(0,r.jsx)(n.td,{children:"[]testcontainers.ContainerCustomizer"}),(0,r.jsx)(n.td,{children:"The functional options to pass to the [testcontainers.Run] function. This argument is optional."}),(0,r.jsx)(n.td,{children:"-"})]})]})]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:"// Config contains the configuration for a container service.\ntype Config[T testcontainers.Container] struct {\n // ServiceKey is the key used to identify the service in the Fiber app's state.\n ServiceKey string\n\n // Image is the image name to use for the container.\n Image string\n\n // Run is the function to use to run the container.\n // It's usually the Run function from the testcontainers-go module, like redis.Run or postgres.Run,\n // although it could be the generic [testcontainers.Run] function from the testcontainers-go package.\n Run func(ctx context.Context, img string, opts ...testcontainers.ContainerCustomizer) (T, error)\n\n // Options are the functional options to pass to the [testcontainers.Run] function. This argument is optional.\n // You can find the available options in the [testcontainers website].\n //\n // [testcontainers website]: https://golang.testcontainers.org/features/creating_container/#customizing-the-container\n Options []testcontainers.ContainerCustomizer\n}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"containerservice",children:"ContainerService"}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"ContainerService"})," type is a generic type that embeds a ",(0,r.jsx)(n.a,{href:"https://pkg.go.dev/github.com/testcontainers/testcontainers-go#Container",children:"testcontainers.Container"})," interface,\nand implements the [fiber.Service] interface, thanks to the Start, String, State and Terminate methods. It manages the lifecycle of a ",(0,r.jsx)(n.code,{children:"testcontainers.Container"})," instance,\nand it can be retrieved from the Fiber app's state calling the ",(0,r.jsx)(n.code,{children:"fiber.MustGetService"})," function with the key returned by the ",(0,r.jsx)(n.code,{children:"ContainerService.Key"})," method."]}),"\n",(0,r.jsxs)(n.p,{children:["The type parameter ",(0,r.jsx)(n.code,{children:"T"})," must implement the ",(0,r.jsx)(n.a,{href:"https://pkg.go.dev/github.com/testcontainers/testcontainers-go#Container",children:"testcontainers.Container"})," interface,\nas in the Testcontainers Go modules (e.g. ",(0,r.jsx)(n.a,{href:"https://pkg.go.dev/github.com/testcontainers/testcontainers-go/modules/redis#RedisContainer",children:"redis.RedisContainer"}),",\n",(0,r.jsx)(n.a,{href:"https://pkg.go.dev/github.com/testcontainers/testcontainers-go/modules/postgres#PostgresContainer",children:"postgres.PostgresContainer"}),", etc.), or in the generic\n",(0,r.jsx)(n.a,{href:"https://pkg.go.dev/github.com/testcontainers/testcontainers-go#GenericContainer",children:"testcontainers.DockerContainer"})," type, used for custom containers."]}),"\n",(0,r.jsx)(n.admonition,{type:"note",children:(0,r.jsxs)(n.p,{children:["Since ",(0,r.jsx)(n.code,{children:"ContainerService"})," implements the ",(0,r.jsx)(n.code,{children:"fiber.Service"})," interface, container cleanup is handled automatically by the Fiber framework when the application shuts down. There's no need for manual cleanup code."]})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:"type ContainerService[T testcontainers.Container] struct\n"})}),"\n",(0,r.jsx)(n.h4,{id:"signature-1",children:"Signature"}),"\n",(0,r.jsx)(n.h5,{id:"key",children:"\xa0Key"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:"// Key returns the key used to identify the service in the Fiber app's state.\n// Consumers should use string constants for service keys to ensure consistency\n// when retrieving services from the Fiber app's state.\nfunc (c *ContainerService[T]) Key() string\n"})}),"\n",(0,r.jsx)(n.h5,{id:"container",children:"Container"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:"// Container returns the Testcontainers container instance, giving full access to the T type methods.\n// It's useful to access the container's methods, like [testcontainers.Container.MappedPort]\n// or [testcontainers.Container.Inspect].\nfunc (c *ContainerService[T]) Container() T\n"})}),"\n",(0,r.jsx)(n.h5,{id:"start",children:"Start"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:"// Start creates and starts the container, calling the [run] function with the [img] and [opts] arguments.\n// It implements the [fiber.Service] interface.\nfunc (c *ContainerService[T]) Start(ctx context.Context) error\n"})}),"\n",(0,r.jsx)(n.h5,{id:"string",children:"String"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:"// String returns the service key, which uniquely identifies the container service.\n// It implements the [fiber.Service] interface.\nfunc (c *ContainerService[T]) String() string\n"})}),"\n",(0,r.jsx)(n.h5,{id:"state",children:"State"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:"// State returns the status of the container.\n// It implements the [fiber.Service] interface.\nfunc (c *ContainerService[T]) State(ctx context.Context) (string, error)\n"})}),"\n",(0,r.jsx)(n.h5,{id:"terminate",children:"Terminate"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:"// Terminate stops and removes the container. It implements the [fiber.Service] interface.\nfunc (c *ContainerService[T]) Terminate(ctx context.Context) error\n"})}),"\n",(0,r.jsx)(n.h3,{id:"common-errors",children:"Common Errors"}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Error"}),(0,r.jsx)(n.th,{children:"Description"}),(0,r.jsx)(n.th,{children:"Resolution"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"ErrNilConfig"}),(0,r.jsx)(n.td,{children:"Returned when the config is nil"}),(0,r.jsx)(n.td,{children:"Ensure config is properly initialized"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"ErrContainerNotRunning"}),(0,r.jsx)(n.td,{children:"Returned when the container is not running"}),(0,r.jsx)(n.td,{children:"Check container state before operations"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"ErrEmptyServiceKey"}),(0,r.jsx)(n.td,{children:"Returned when the service key is empty"}),(0,r.jsx)(n.td,{children:"Provide a non-empty service key"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"ErrImageEmpty"}),(0,r.jsx)(n.td,{children:"Returned when the image is empty"}),(0,r.jsx)(n.td,{children:"Provide a valid image name"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"ErrRunNil"}),(0,r.jsx)(n.td,{children:"Returned when the run is nil"}),(0,r.jsx)(n.td,{children:"Provide a valid run function"})]})]})]}),"\n",(0,r.jsx)(n.h2,{id:"examples",children:"Examples"}),"\n",(0,r.jsxs)(n.p,{children:["You can find more examples in the ",(0,r.jsx)(n.a,{href:"https://github.com/gofiber/contrib/blob/main/testcontainers/examples_test.go",children:"testable examples"}),"."]}),"\n",(0,r.jsx)(n.h3,{id:"adding-a-module-container-using-the-testcontainers-gos-redis-module",children:"Adding a module container using the Testcontainers Go's Redis module"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:'package main\n\nimport (\n "fmt"\n "log"\n\n "github.com/gofiber/fiber/v3"\n\n "github.com/gofiber/contrib/testcontainers"\n tc "github.com/testcontainers/testcontainers-go"\n "github.com/testcontainers/testcontainers-go/modules/redis"\n)\n\nfunc main() {\n cfg := &fiber.Config{}\n\n // Define the base key for the module service.\n // The service returned by the [testcontainers.AddService] function,\n // using the [ContainerService.Key] method,\n // concatenates the base key with the "using testcontainers-go" suffix.\n const (\n  redisKey    = "redis-module"\n )\n\n // Adding containers coming from the testcontainers-go modules,\n // in this case, a Redis and a Postgres container.\n\n redisModuleConfig := testcontainers.NewModuleConfig(redisKey, "redis:latest", redis.Run)\n redisSrv, err := testcontainers.AddService(cfg, redisModuleConfig)\n if err != nil {\n  log.Println("error adding redis module:", err)\n  return\n }\n\n // Create a new Fiber app, using the provided configuration.\n app := fiber.New(*cfg)\n\n // Retrieve all services from the app\'s state.\n // This returns a slice of all the services registered in the app\'s state.\n srvs := app.State().Services()\n\n // Retrieve the Redis container from the app\'s state using the key returned by the [ContainerService.Key] method.\n redisCtr := fiber.MustGetService[*testcontainers.ContainerService[*redis.RedisContainer]](app.State(), redisSrv.Key())\n\n // Start the Fiber app.\n app.Listen(":3000")\n}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"adding-a-custom-container-using-the-testcontainers-go-package",children:"Adding a custom container using the Testcontainers Go package"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:'package main\n\nimport (\n "fmt"\n "log"\n\n "github.com/gofiber/fiber/v3"\n\n "github.com/gofiber/contrib/testcontainers"\n tc "github.com/testcontainers/testcontainers-go"\n)\n\nfunc main() {\n cfg := &fiber.Config{}\n\n // Define the base key for the generic service.\n // The service returned by the [testcontainers.AddService] function,\n // using the [ContainerService.Key] method,\n // concatenates the base key with the "using testcontainers-go" suffix.\n const (\n  nginxKey = "nginx-generic"\n )\n\n // Adding a generic container, directly from the testcontainers-go package.\n containerConfig := testcontainers.NewContainerConfig(nginxKey, "nginx:latest", tc.WithExposedPorts("80/tcp"))\n\n nginxSrv, err := testcontainers.AddService(cfg, containerConfig)\n if err != nil {\n  log.Println("error adding nginx generic:", err)\n  return\n }\n\n app := fiber.New(*cfg)\n\n nginxCtr := fiber.MustGetService[*testcontainers.ContainerService[*tc.DockerContainer]](app.State(), nginxSrv.Key())\n\n // Start the Fiber app.\n app.Listen(":3000")\n}\n'})})]})}function l(e={}){let{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(h,{...e})}):h(e)}},84429:function(e,n,t){t.d(n,{R:()=>o,x:()=>c});var i=t(96540);let r={},s=i.createContext(r);function o(e){let n=i.useContext(s);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),i.createElement(s.Provider,{value:n},e.children)}}}]);