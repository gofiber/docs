"use strict";(self.webpackChunkfiber_docs=self.webpackChunkfiber_docs||[]).push([["4572"],{32671:function(e,n,s){s.r(n),s.d(n,{frontMatter:()=>l,toc:()=>c,default:()=>h,metadata:()=>i,assets:()=>a,contentTitle:()=>o});var i=JSON.parse('{"id":"sse/README","title":"Server-Sent Events","description":"Implementing Server-Sent Events in an application.","source":"@site/docs/recipes/sse/README.md","sourceDirName":"sse","slug":"/sse/","permalink":"/recipes/sse/","draft":false,"unlisted":false,"editUrl":"https://github.com/gofiber/recipes/edit/master/sse/README.md","tags":[],"version":"current","lastUpdatedAt":1762030608000,"frontMatter":{"title":"Server-Sent Events","keywords":["sse","server-sent events","real-time"],"description":"Implementing Server-Sent Events in an application."},"sidebar":"left_sidebar","previous":{"title":"Sqlc","permalink":"/recipes/sqlc/"},"next":{"title":"Stream Request Body","permalink":"/recipes/stream-request-body/"}}'),t=s(74848),r=s(84429);let l={title:"Server-Sent Events",keywords:["sse","server-sent events","real-time"],description:"Implementing Server-Sent Events in an application."},o="Server-Sent Events with Fiber",a={},c=[{value:"Description",id:"description",level:2},{value:"Prerequisites",id:"prerequisites",level:2},{value:"Setup",id:"setup",level:2},{value:"Running the Application",id:"running-the-application",level:2},{value:"Endpoints",id:"endpoints",level:2},{value:"Example Usage",id:"example-usage",level:2},{value:"Custom Messages",id:"custom-messages",level:3},{value:"Code Overview",id:"code-overview",level:2},{value:"<code>main.go</code>",id:"maingo",level:3},{value:"Additional Information",id:"additional-information",level:2}];function d(e){let n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"server-sent-events-with-fiber",children:"Server-Sent Events with Fiber"})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.a,{href:"https://github.com/gofiber/recipes/tree/master/sse",children:(0,t.jsx)(n.img,{src:"https://img.shields.io/static/v1?label=&message=Github&color=2ea44f&style=for-the-badge&logo=github",alt:"Github"})})," ",(0,t.jsx)(n.a,{href:"https://stackblitz.com/github/gofiber/recipes/tree/master/sse",children:(0,t.jsx)(n.img,{src:"https://img.shields.io/static/v1?label=&message=StackBlitz&color=2ea44f&style=for-the-badge&logo=StackBlitz",alt:"StackBlitz"})})]}),"\n",(0,t.jsx)(n.p,{children:"This example demonstrates how to implement Server-Sent Events (SSE) in a Fiber application."}),"\n",(0,t.jsx)(n.h2,{id:"description",children:"Description"}),"\n",(0,t.jsx)(n.p,{children:"Server-Sent Events (SSE) allow servers to push updates to the client over a single HTTP connection. This is useful for real-time applications where the server needs to continuously send data to the client, such as live feeds, notifications, or real-time charts."}),"\n",(0,t.jsx)(n.h2,{id:"prerequisites",children:"Prerequisites"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Go 1.16 or higher"}),"\n",(0,t.jsx)(n.li,{children:"Go modules"}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"setup",children:"Setup"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Clone the repository:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sh",children:"git clone https://github.com/gofiber/recipes.git\ncd recipes/sse\n"})}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Install dependencies:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sh",children:"go mod tidy\n"})}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"running-the-application",children:"Running the Application"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Run the application:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sh",children:"go run main.go\n"})}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["The server will start on ",(0,t.jsx)(n.code,{children:"http://localhost:3000"}),"."]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"endpoints",children:"Endpoints"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"GET /"}),": Index page"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"GET /sse"}),": SSE route"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"PUT /publish"}),": Send messages via SSE"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"example-usage",children:"Example Usage"}),"\n",(0,t.jsxs)(n.p,{children:["By default, the example will run on port ",(0,t.jsx)(n.code,{children:"3000"}),"; this can be changed by modifying the ",(0,t.jsx)(n.code,{children:"appPort"})," constant in ",(0,t.jsx)(n.code,{children:"main.go"})]}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["Open your browser and navigate to ",(0,t.jsx)(n.code,{children:"http://localhost:3000"}),"."]}),"\n",(0,t.jsx)(n.li,{children:"The client will automatically connect to the SSE endpoint and start receiving updates from the server."}),"\n",(0,t.jsxs)(n.li,{children:["The ",(0,t.jsx)(n.code,{children:"/sse"})," endpoint will publish the current time to the client every two seconds"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"custom-messages",children:"Custom Messages"}),"\n",(0,t.jsxs)(n.p,{children:["To send a custom message, send a ",(0,t.jsx)(n.code,{children:"PUT"})," request to the ",(0,t.jsx)(n.code,{children:"/publish"})," endpoint in the following JSON format"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'{\n  "message": "Hello, World!"\n}\n'})}),"\n",(0,t.jsxs)(n.p,{children:["Messages sent to the ",(0,t.jsx)(n.code,{children:"/publish"})," endpoint will be added to a queue that is read from in FIFO order. You can test this\nby using curl in an iterator"]}),"\n",(0,t.jsx)(n.p,{children:"If you are using the Bash or Zsh shell:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sh",children:'for i in {1..10}; do\n  curl -X PUT -H \'Content-type: application/json\' --data "{\\"message\\":\\"SSE TEST $i\\"}" http://localhost:3000/publish\ndone\n'})}),"\n",(0,t.jsx)(n.p,{children:"If you are using fish:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sh",children:'for i in (seq 1 10)\n  curl -X PUT -H \'Content-type: application/json\' --data "{\\"message\\":\\"SSE TEST $i\\"}" http://localhost:3000/publish\nend\n'})}),"\n",(0,t.jsxs)(n.p,{children:["Once published, your added messages will begin appearing in the output at ",(0,t.jsx)(n.code,{children:"http://localhost:3000"}),". Once the queue is empty\nand no user-published messages are left, ",(0,t.jsx)(n.code,{children:"/sse"})," will return to it's standard behavior of displaying the current time."]}),"\n",(0,t.jsx)(n.h2,{id:"code-overview",children:"Code Overview"}),"\n",(0,t.jsx)(n.h3,{id:"maingo",children:(0,t.jsx)(n.code,{children:"main.go"})}),"\n",(0,t.jsx)(n.p,{children:"The main Go file sets up the Fiber application and handles the SSE connections. It includes the necessary configuration to send events to the client."}),"\n",(0,t.jsx)(n.h2,{id:"additional-information",children:"Additional Information"}),"\n",(0,t.jsx)(n.p,{children:"Server-Sent Events (SSE) is a standard allowing servers to push data to web clients over HTTP. Unlike WebSockets, which require a full-duplex connection, SSE uses a unidirectional connection from the server to the client. This makes SSE simpler to implement and more efficient for scenarios where only the server needs to send updates."}),"\n",(0,t.jsx)(n.p,{children:"For more information on SSE, you can refer to the following resources:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events",children:"Server-Sent Events on MDN"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"https://en.wikipedia.org/wiki/Server-sent_events",children:"Server-Sent Events on Wikipedia"})}),"\n"]})]})}function h(e={}){let{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},84429:function(e,n,s){s.d(n,{R:()=>l,x:()=>o});var i=s(96540);let t={},r=i.createContext(t);function l(e){let n=i.useContext(r);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:l(e.components),i.createElement(r.Provider,{value:n},e.children)}}}]);