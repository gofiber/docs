"use strict";(self.webpackChunkfiber_docs=self.webpackChunkfiber_docs||[]).push([["11498"],{55577:function(e,n,r){r.r(n),r.d(n,{frontMatter:()=>a,toc:()=>l,default:()=>h,metadata:()=>i,assets:()=>o,contentTitle:()=>c});var i=JSON.parse('{"id":"parsley/README","title":"Parsley","description":"Using Parsley for dependency injection in an application.","source":"@site/docs/recipes/parsley/README.md","sourceDirName":"parsley","slug":"/parsley/","permalink":"/recipes/parsley/","draft":false,"unlisted":false,"editUrl":"https://github.com/gofiber/recipes/edit/master/parsley/README.md","tags":[],"version":"current","lastUpdatedAt":1762030608000,"frontMatter":{"title":"Parsley","keywords":["parsley","dependency injection","di","inversion of control","ioc"],"description":"Using Parsley for dependency injection in an application."},"sidebar":"left_sidebar","previous":{"title":"Optional Parameter","permalink":"/recipes/optional-parameter/"},"next":{"title":"PostgreSQL","permalink":"/recipes/postgresql/"}}'),t=r(74848),s=r(84429);let a={title:"Parsley",keywords:["parsley","dependency injection","di","inversion of control","ioc"],description:"Using Parsley for dependency injection in an application."},c="Fiber with Dependency Injection (via Parsley)",o={},l=[{value:"Prerequisites",id:"prerequisites",level:2},{value:"Overview",id:"overview",level:2},{value:"Key features",id:"key-features",level:3},{value:"How it works",id:"how-it-works",level:2},{value:"The recipe - step by step",id:"the-recipe---step-by-step",level:2},{value:"Configure and register the Fiber instance",id:"configure-and-register-the-fiber-instance",level:3},{value:"Define and register the application service(s)",id:"define-and-register-the-application-services",level:3},{value:"Implement and register route handlers",id:"implement-and-register-route-handlers",level:3},{value:"Run the application",id:"run-the-application",level:2}];function d(e){let n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"fiber-with-dependency-injection-via-parsley",children:"Fiber with Dependency Injection (via Parsley)"})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.a,{href:"https://github.com/gofiber/recipes/tree/master/parsley",children:(0,t.jsx)(n.img,{src:"https://img.shields.io/static/v1?label=&message=Github&color=2ea44f&style=for-the-badge&logo=github",alt:"Github"})})," ",(0,t.jsx)(n.a,{href:"https://stackblitz.com/github/gofiber/recipes/tree/master/parsley",children:(0,t.jsx)(n.img,{src:"https://img.shields.io/static/v1?label=&message=StackBlitz&color=2ea44f&style=for-the-badge&logo=StackBlitz",alt:"StackBlitz"})})]}),"\n",(0,t.jsxs)(n.p,{children:["This example demonstrates integrating the ",(0,t.jsx)(n.a,{href:"https://github.com/matzefriedrich/parsley",children:"Parsley dependency injection framework"})," into a GoFiber web application. The goal is to showcase how dependency injection can create a clean, maintainable, and modular structure in your GoFiber projects."]}),"\n",(0,t.jsx)(n.h2,{id:"prerequisites",children:"Prerequisites"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Go 1.23+"}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,t.jsxs)(n.p,{children:["In this example, we use ",(0,t.jsx)(n.a,{href:"https://github.com/matzefriedrich/parsley",children:"Parsley"})," to:"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Bootstrap the application:"})," Set up and configure the Fiber app using Parsley\u2019s DI container."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Register dependencies:"})," Define and register services and route handlers with the DI container."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Resolve dependencies:"})," Automatically resolve and inject them where needed."]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"key-features",children:"Key features"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Modular configuration:"})," Services are registered in modules, allowing for a clean separation of concerns."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Automatic dependency injection:"})," Constructor-based dependency injection wires services together."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Simplified route management:"})," Route handlers are registered and managed via the DI container, making it easy to extend and maintain."]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"how-it-works",children:"How it works"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["The ",(0,t.jsx)(n.code,{children:"main"})," function bootstraps the application using Parsley\u2019s ",(0,t.jsx)(n.code,{children:"RunParsleyApplication"})," function."]}),"\n",(0,t.jsx)(n.li,{children:"Modules define how services (such as the Fiber app and route handlers) are registered and configured."}),"\n",(0,t.jsxs)(n.li,{children:["Route handlers are implemented as services that receive their dependencies (like the ",(0,t.jsx)(n.code,{children:"Greeter"})," service) via constructor injection. The ",(0,t.jsx)(n.code,{children:"Greeter"})," service is a simple example of how services can be injected and used within route handlers to handle requests."]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"the-recipe---step-by-step",children:"The recipe - step by step"}),"\n",(0,t.jsxs)(n.p,{children:["This guide demonstrates integrating the Parsley dependency injection framework with the GoFiber web framework. You can either clone the GoFiber recipes repository and navigate to the ",(0,t.jsx)(n.strong,{children:"parsley"})," example, or replicate each module while following the article:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sh",children:"git clone https://github.com/gofiber/recipes.git\ncd recipes/parsley\n"})}),"\n",(0,t.jsxs)(n.p,{children:["The main entry point of the application is in the ",(0,t.jsx)(n.code,{children:"cmd/main.go"}),"."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-go",children:'package main\n\nimport (\n    "context"\n\n    "github.com/gofiber/recipes/parsley-app/internal"\n    "github.com/gofiber/recipes/parsley-app/internal/modules"\n\n    "github.com/matzefriedrich/parsley/pkg/bootstrap"\n)\n\nfunc main() {\n\n    ctx := context.Background()\n\n    // Runs a Fiber instance as a Parsley-enabled app\n    bootstrap.RunParsleyApplication(ctx, internal.NewApp,\n        modules.ConfigureFiber,\n        modules.ConfigureGreeter)\n}\n'})}),"\n",(0,t.jsxs)(n.p,{children:["In this file, the ",(0,t.jsx)(n.code,{children:"RunParsleyApplication"})," function bootstraps the application. It initializes the Parsley application context and configures the GoFiber server with the necessary services and route handlers. Parsley's ",(0,t.jsx)(n.code,{children:"bootstrap"})," package is generic and could also be used with other web application frameworks; the glue is the ",(0,t.jsx)(n.code,{children:"NewApp"})," method, representing a constructor function that must return a ",(0,t.jsx)(n.code,{children:"bootstrap.Application"})," instance."]}),"\n",(0,t.jsxs)(n.p,{children:["The last parameter of the ",(0,t.jsx)(n.code,{children:"RunParsleyApplication"})," function is an ellipsis parameter accepting ",(0,t.jsx)(n.code,{children:"ModuleFunc"})," values representing service registration functions, which are invoked before calling the constructor function for ",(0,t.jsx)(n.code,{children:"bootstrap.Application"}),". Here, the ",(0,t.jsx)(n.code,{children:"ConfigureFiber"})," and ",(0,t.jsx)(n.code,{children:"ConfigureGreeter"})," functions are specified; those are defined by the ",(0,t.jsx)(n.code,{children:"modules"})," package."]}),"\n",(0,t.jsx)(n.h3,{id:"configure-and-register-the-fiber-instance",children:"Configure and register the Fiber instance"}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"ConfigureFiber"})," function sets up the Fiber application and registers it as a singleton service within the Parsley framework:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-go",children:'package modules\n\nimport (\n    "github.com/gofiber/fiber/v2"\n    "github.com/matzefriedrich/parsley/pkg/registration"\n    "github.com/matzefriedrich/parsley/pkg/types"\n)\n\nvar _ types.ModuleFunc = ConfigureFiber\n\nfunc ConfigureFiber(registry types.ServiceRegistry) error {\n    registration.RegisterInstance(registry, fiber.Config{\n        AppName:   "parsley-app-recipe",\n        Immutable: true,\n    })\n\n    registry.Register(newFiber, types.LifetimeSingleton)\n    registry.RegisterModule(RegisterRouteHandlers)\n\n    return nil\n}\n\nfunc newFiber(config fiber.Config) *fiber.App {\n    return fiber.New(config)\n}\n\n'})}),"\n",(0,t.jsx)(n.p,{children:"This configuration ensures that the Fiber instance is initialized and available for dependency injection."}),"\n",(0,t.jsx)(n.h3,{id:"define-and-register-the-application-services",children:"Define and register the application service(s)"}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"Greeter"})," service generates greeting messages based on input parameters. In the recipe example application, this service is a dependency required by the handler of the ",(0,t.jsx)(n.code,{children:"say-hello"})," route."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-go",children:'package services\n\nimport "fmt"\n\ntype Greeter interface {\n    SayHello(name string, polite bool) string\n}\n\ntype greeter struct{}\n\nfunc (g *greeter) SayHello(name string, polite bool) string {\n    if polite {\n        return fmt.Sprintf("Good day, %s!\\n", name)\n    }\n    return fmt.Sprintf("Hi, %s\\n", name)\n}\n\nfunc NewGreeter() Greeter {\n    return &greeter{}\n}\n'})}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"Greeter"})," service is registered by the ",(0,t.jsx)(n.code,{children:"ConfigureGreeter"})," service registration module:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-go",children:'package modules\n\nimport (\n    "github.com/gofiber/recipes/parsley-app/internal/services"\n\n    "github.com/matzefriedrich/parsley/pkg/types"\n)\n\nfunc ConfigureGreeter(registry types.ServiceRegistry) error {\n    registry.Register(services.NewGreeterFactory, types.LifetimeTransient)\n    return nil\n}\n'})}),"\n",(0,t.jsxs)(n.p,{children:["This setup allows the ",(0,t.jsx)(n.code,{children:"Greeter"})," service to be injected wherever needed within the application."]}),"\n",(0,t.jsx)(n.h3,{id:"implement-and-register-route-handlers",children:"Implement and register route handlers"}),"\n",(0,t.jsxs)(n.p,{children:["Route handlers in this example are services that implement the ",(0,t.jsx)(n.code,{children:"RouteHandler"})," interface, allowing them to register routes with the Fiber application."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-go",children:'package route_handlers\n\nimport (\n    "strconv"\n\n    "github.com/gofiber/recipes/parsley-app/internal/services"\n\n    "github.com/gofiber/fiber/v2"\n)\n\ntype greeterRouteHandler struct {\n    greeter services.Greeter\n}\n\nconst defaultPoliteFlag = "true"\n\nfunc (h *greeterRouteHandler) Register(app *fiber.App) {\n    app.Get("/say-hello", h.HandleSayHelloRequest)\n}\n\nfunc (h *greeterRouteHandler) HandleSayHelloRequest(ctx *fiber.Ctx) error {\n\n    name := ctx.Query("name")\n\n    politeFlag := ctx.Query("polite", defaultPoliteFlag)\n    polite, _ := strconv.ParseBool(politeFlag)\n\n    msg := h.greeter.SayHello(name, polite)\n    return ctx.Status(fiber.StatusOK).Send([]byte(msg))\n}\n\nvar _ RouteHandler = &greeterRouteHandler{}\n\nfunc NewGreeterRouteHandler(greeter services.Greeter) RouteHandler {\n    return &greeterRouteHandler{\n        greeter: greeter,\n    }\n}\n'})}),"\n",(0,t.jsxs)(n.p,{children:["This handler responds to GET requests at ",(0,t.jsx)(n.code,{children:"/say-hello"})," with a greeting message, utilizing the ",(0,t.jsx)(n.code,{children:"Greeter"})," service injected via the constructor function."]}),"\n",(0,t.jsx)(n.h2,{id:"run-the-application",children:"Run the application"}),"\n",(0,t.jsx)(n.p,{children:"To start the application, execute:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sh",children:"go run ./cmd/main.go\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Once running, you can test the ",(0,t.jsx)(n.code,{children:"say-hello"})," endpoint via the browser, or from the terminal using ",(0,t.jsx)(n.code,{children:"curl"}),". For this recipe, the default listening port is ",(0,t.jsx)(n.code,{children:"5502"}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sh",children:"curl http://localhost:5502/say-hello?name=YourName&polite=true\n"})})]})}function h(e={}){let{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},84429:function(e,n,r){r.d(n,{R:()=>a,x:()=>c});var i=r(96540);let t={},s=i.createContext(t);function a(e){let n=i.useContext(s);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:a(e.components),i.createElement(s.Provider,{value:n},e.children)}}}]);